paths:
  /:
    get:
      description: Returns details about the running Qdrant instance.
      summary: Retrieve instance details
      tags:
      - Service
  /aliases:
    get:
      description: Retrieves a list of all existing aliases.
      summary: List all aliases
      tags:
      - Aliases
  /cluster:
    get:
      description: Returns information about the cluster's current state and composition.
      summary: Check cluster status
      tags:
      - Distributed
  /cluster/peer/{peer_id}:
    delete:
      description: Attempts to remove the node from the cluster. This endpoint returns an error if the node (peer) has shards on it.
      summary: Remove peer from cluster
      tags:
      - Distributed
  /cluster/recover:
    post:
      description: Attempts to restore or synchronize the node's current state with that of its peers.
      summary: Recover cluster state
      tags:
      - Distributed
  /collections:
    get:
      description: Returns a list of all existing collections.
      summary: List all collections
      tags:
      - Collections
  /collections/aliases:
    post:
      description: Updates aliases for the specified collections.
      summary: Update collection aliases 
      tags:
      - Aliases
  /collections/{collection_name}:
    delete:
      description: Drops the specified collection and all associated data in it.
      summary: Delete a collection
      tags:
      - Collections
    get:
      description: Retrieves parameters from the specified collection.
      summary: Get collection details
      tags:
      - Collections
    patch:
      description: Updates the parameters of the specified collection.
      summary: Update collection parameters
      tags:
      - Collections
    put:
      description: Creates a new collection with the given parameters.
      summary: Create a collection
      tags:
      - Collections
  /collections/{collection_name}/aliases:
    get:
      description: Retrieves a list of all aliases for the specified collection.
      summary: List collection aliases 
      tags:
      - Aliases
  /collections/{collection_name}/cluster:
    get:
      description: Retrieves cluster details for a specified collection.
      summary: Retrieve cluster details
      tags:
      - Distributed
    post:
      description: Updates the cluster configuration for a specified collection.
      summary: Update cluster setup
      tags:
      - Distributed
  /collections/{collection_name}/exists:
    get:
      description: Checks whether the specified collection exists. 
      summary: Check collection existence
      tags:
      - Collections
  /collections/{collection_name}/index:
    put:
      description: Creates a payload index for a field in the specified collection.
      summary: Create payload index
      tags:
      - Indexes
  /collections/{collection_name}/index/{field_name}:
    delete:
      description: Deletes a payload index for a field in the specified collection.
      summary: Delete payload index
      tags:
      - Indexes
  /collections/{collection_name}/points:
    post:
      description: Retrieves all details from multiple points.
      summary: Retrieve points
      tags:
      - Points
    put:
      description: Performs the insert + update action on specified points. Any point with an existing {id} will be overwritten.
      summary: Upsert points
      tags:
      - Points
  /collections/{collection_name}/points/batch:
    post:
      description: Batch updates points, including their respective vectors and payloads.
      summary: Batch update points
      tags:
      - Points
  /collections/{collection_name}/points/count:
    post:
      description: Counts the number of points that match a specified filtering condition.
      summary: Count points
      tags:
      - Points
  /collections/{collection_name}/points/delete:
    post:
      description: Deletes specified points from the collection. 
      summary: Delete points
      tags:
      - Points
  /collections/{collection_name}/points/discover:
    post:
      description: 'Retrieves the most similar points to a given target, constrained by the provided context.

Context Search: When only the context is provided (without a target), pairs of points are used to generate a loss that guides the search towards the area where most positive examples overlap. The score minimizes finding points closer to a negative example than to a positive example. The maximum score a point can achieve is 0.0, meaning many points may have a score of 0.0.

Target Search: When a target is provided (with or without context), the score consists of two parts: the integer part represents the rank with respect to the context, and the decimal part relates to the distance to the target. The context score for each pair is +1 if the point is closer to a positive example than to a negative example, and -1 otherwise.'
      summary: Discover points
      tags:
      - Search
  /collections/{collection_name}/points/discover/batch:
    post:
      description: Retrieves points in batches based on the target and/or positive and negative example pairs.
      summary: Discover batch points
      tags:
      - Search
  /collections/{collection_name}/points/payload:
    post:
      description: Sets payload values for specified points.
      summary: Set payload
      tags:
      - Points
    put:
      description: Replaces the entire payload of a specified point with a new payload.
      summary: Overwrite payload
      tags:
      - Points
  /collections/{collection_name}/points/payload/clear:
    post:
      description: Removes the entire payload for specified points.
      summary: Clear payload
      tags:
      - Points
  /collections/{collection_name}/points/payload/delete:
    post:
      description: Deletes a specified key payload for points.
      summary: Delete payload
      tags:
      - Points
  /collections/{collection_name}/points/recommend:
    post:
      description: Retrieves points that are closer to stored positive examples and further from negative examples.
      summary: Recommend points
      tags:
      - Points
  /collections/{collection_name}/points/recommend/batch:
    post:
      description: Retrieves points in batches that are closer to stored positive examples and further from negative examples.
      summary: Recommend batch points
      tags:
      - Search
  /collections/{collection_name}/points/recommend/groups:
    post:
      description: Retrieves points that are closer to stored positive examples and further from negative examples. Results are grouped by the specified payload field.
      summary: Recommend point groups
      tags:
      - Search
  /collections/{collection_name}/points/scroll:
    post:
      description: 'Returns all points in a page-by-page manner.

        By default, all resulting points are sorted by {id}.

        To query the next page specify the last {id} in the offset field.

        Additionally, you can specify filters and sorting options.

        '
      summary: Scroll points
      tags:
      - Search
  /collections/{collection_name}/points/search:
    post:
      description: Retrieves the closest points based on vector similarity and given filtering conditions.
      summary: Search points
      tags:
      - Search
  /collections/{collection_name}/points/search/batch:
    post:
      description: Retrieves the closest points in batches based on vector similarity and given filtering conditions.
      summary: Search batch points
      tags:
      - Search
  /collections/{collection_name}/points/search/groups:
    post:
      description: Retrieves the closest points based on vector similarity and given filtering conditions, grouped by a given payload field.
      summary: Search point groups
      tags:
      - Search
  /collections/{collection_name}/points/vectors:
    put:
      description: Updates specified vectors on points. All other unspecified vectors will stay intact.
      summary: Update vectors
      tags:
      - Points
  /collections/{collection_name}/points/vectors/delete:
    post:
      description: Deletes specified vectors from points. All other unspecified vectors will stay intact.
      summary: Delete vectors
      tags:
      - Points
  /collections/{collection_name}/points/{id}:
    get:
      description: Retrieves all details from a single point.
      summary: Retrieve a point
      tags:
      - Points
  /collections/{collection_name}/shards:
    put:
      description: Creates one or more shard keys for a specified collection.
      summary: Create a shard key
      tags:
      - Distributed
  /collections/{collection_name}/shards/delete:
    post:
      description: Deletes one or more shard keys for a specified collection. 
      summary: Delete a shard key
      tags:
      - Distributed
  /collections/{collection_name}/shards/{shard_id}/snapshots:
    get:
      description: Returns a list of all snapshots for a shard from a collection.
      summary: List all snapshots (shard)
      tags:
      - Snapshots
    post:
      description: Creates a new snapshot of a shard from a collection.
      summary: Create a snapshot (shard)
      tags:
      - Snapshots
  /collections/{collection_name}/shards/{shard_id}/snapshots/recover:
    put:
      description: Recovers the shard of a local collection from a snapshot. This will overwrite any collection data, which is stored in this shard.
      summary: Recover from a snapshot (shard)
      tags:
      - Snapshots
  /collections/{collection_name}/shards/{shard_id}/snapshots/upload:
    post:
      description: Recovers the shard of a local collection from an uploaded snapshot. This will overwrite any collection data, which is stored in this shard.
      summary: Recover from an uploaded snapshot (shard)
      tags:
      - Snapshots
  /collections/{collection_name}/shards/{shard_id}/snapshots/{snapshot_name}:
    delete:
      description: Deletes the specified snapshot of a shard from a collection.
      summary: Delete a snapshot (shard)
      tags:
      - Snapshots
    get:
      description: Downloads the specified snapshot of a shard from a collection as a file.
      summary: Download a snapshot (shard)
      tags:
      - Snapshots
  /collections/{collection_name}/snapshots:
    get:
      description: Retrieves a list of all snapshots for a specified collection.
      summary: List all snapshots (collection)
      tags:
      - Snapshots
    post:
      description: Creates a new snapshot for a specified collection.
      summary: Create a snapshot (collection)
      tags:
      - Snapshots
  /collections/{collection_name}/snapshots/recover:
    put:
      description: Recovers local collection data from a snapshot. This will overwrite any collection data stored on the node. If the collection does not exist, it will be created.
      summary: Recover from a snapshot (collection)
      tags:
      - Snapshots
  /collections/{collection_name}/snapshots/upload:
    post:
      description: Recovers local collection data from an uploaded snapshot. This will overwrite any collection data stored on the node. If the collection does not exist, it will be created.
      summary: Recover from an uploaded snapshot (collection)
      tags:
      - Snapshots
  /collections/{collection_name}/snapshots/{snapshot_name}:
    delete:
      description: Deletes the specified snapshot for a collection.
      summary: Delete a snapshot (collection)
      tags:
      - Snapshots
    get:
      description: Downloads the specified snapshot file from a collection.
      summary: Download a snapshot (collection)
      tags:
      - Snapshots
  /healthz:
    get:
      description: Checks the health of individual instance.
      summary: Kubernetes health check
      tags:
      - Service
  /issues:
    delete:
      description: Removes all issues reported so far.
      summary: Clear issues
      tags:
      - Beta
    get:
      description: Retrieves a report of performance issues and configuration suggestions.
      summary: Report issues
      tags:
      - Beta
  /livez:
    get:
      description: Monitors the container responsiveness and alerts in case of failure.
      summary: Kubernetes liveness probe
      tags:
      - Service
  /locks:
    get:
      description: Retrieves the current lock setting. If write is false, all write operations and collection creation are restricted.
      summary: Check write protection
      tags:
      - Service
    post:
      description: Restricts all write operations and forbids collection creation. This endpoint also returns previous lock options.
      summary: Set write protection
      tags:
      - Service
  /metrics:
    get:
      description: 'Collect metrics data, such as: application info, collection info, cluster info and statistics.'
      summary: Collect Prometheus metrics data
      tags:
      - Service
  /readyz:
    get:
      description: Monitors the container to see when it can start accepting traffic.
      summary: Kubernetes readiness probe
      tags:
      - Service
  /snapshots:
    get:
      description: Returns a list of all snapshots for the entire storage.
      summary: List all snapshots (storage)
      tags:
      - Snapshots
    post:
      description: Creates a new snapshot of the entire storage.
      summary: Create a snapshot (storage)
      tags:
      - Snapshots
  /snapshots/{snapshot_name}:
    delete:
      description: Deletes the specified snapshot of the entire storage.
      summary: Delete a snapshot (storage)
      tags:
      - Snapshots
    get:
      description: Downloads the specified snapshot of the entire storage as a file.
      summary: Download a snapshot (storage)
      tags:
      - Snapshots
  /telemetry:
    get:
      description: 'Collects telemetry data, such as: application info, system info, collection info, cluster info, configs and statistics.'
      summary: Collect telemetry data
      tags:
      - Service
