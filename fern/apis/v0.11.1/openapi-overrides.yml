components:
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
paths:
  /: {}
  /aliases: {}
  /cluster:
    get:
      description: Returns information about the cluster's current state and composition.
      summary: Check cluster status
      tags:
      - Distributed
  /cluster/peer/{peer_id}:
    delete:
      description: Attempts to remove the node from the cluster. This endpoint returns
        an error if the node (peer) has shards on it.
      summary: Remove peer from cluster
      tags:
      - Distributed
  /cluster/recover: {}
  /collections:
    get:
      description: Returns a list of all existing collections.
      summary: List all collections
      tags:
      - Collections
      x-fern-examples:
      - code-samples:
        - code: 'using Qdrant.Client;


            var client = new QdrantClient("localhost", 6334);


            await client.ListCollectionsAsync();

            '
          language: csharp
      - code-samples:
        - code: 'from qdrant_client import QdrantClient


            client = QdrantClient(url="http://localhost:6333")


            client.get_collections()

            '
          language: python
      - code-samples:
        - code: "import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.listCollectionsAsync().get();\n"
          language: java
      - code-samples:
        - code: 'use qdrant_client::Qdrant;


            let client = Qdrant::from_url("http://localhost:6334").build()?;


            client.list_collections().await?;

            '
          language: rust
      - code-samples:
        - code: 'import { QdrantClient } from "@qdrant/js-client-rest";


            const client = new QdrantClient({ host: "localhost", port: 6333 });


            client.getCollections();

            '
          language: typescript
  /collections/aliases:
    post:
      description: Updates aliases for the specified collections.
      summary: Update collection aliases
      tags:
      - Aliases
      x-fern-examples:
      - code-samples:
        - code: 'using Qdrant.Client;


            var client = new QdrantClient("localhost", 6334);


            await client.CreateAliasAsync(aliasName: "production_collection", collectionName:
            "example_collection");


            await client.DeleteAliasAsync("production_collection");

            '
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.update_collection_aliases(\n    change_aliases_operations=[\n\
            \        models.CreateAliasOperation(\n            create_alias=models.CreateAlias(\n\
            \                collection_name=\"example_collection\", alias_name=\"\
            production_collection\"\n            )\n        )\n    ]\n)\n\nclient.update_collection_aliases(\n\
            \    change_aliases_operations=[\n        models.DeleteAliasOperation(\n\
            \            delete_alias=models.DeleteAlias(alias_name=\"production_collection\"\
            )\n        ),\n    ]\n)\n"
          language: python
      - code-samples:
        - code: "import static io.qdrant.client.ShardKeyFactory.shardKey;\n\nimport\
            \ io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nimport io.qdrant.client.grpc.Collections.DeleteShardKey;\nimport io.qdrant.client.grpc.Collections.DeleteShardKeyRequest;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.createAliasAsync(\"production_collection\"\
            , \"example_collection\").get();\n\nclient.deleteAliasAsync(\"production_collection\"\
            ).get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{CreateAliasBuilder, DeleteAlias};\nuse\
            \ qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\"\
            ).build()?;\n\nclient\n    .create_alias(CreateAliasBuilder::new(\n  \
            \      \"example_collection\",\n        \"production_collection\",\n \
            \   ))\n    .await?;\n\nclient\n    .delete_alias(DeleteAlias {\n    \
            \    alias_name: \"production_collection\".to_string(),\n    })\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.updateCollectionAliases({\n  actions: [\n    {\n      create_alias:\
            \ {\n        collection_name: \"example_collection\",\n        alias_name:\
            \ \"production_collection\",\n      },\n    },\n  ],\n});\n\nclient.updateCollectionAliases({\n\
            \  actions: [\n    {\n      delete_alias: {\n        alias_name: \"production_collection\"\
            ,\n      },\n    },\n  ],\n});\n"
          language: typescript
  /collections/{collection_name}:
    delete:
      description: Drops the specified collection and all associated data in it.
      summary: Delete a collection
      tags:
      - Collections
      x-fern-examples:
      - code-samples:
        - code: 'using Qdrant.Client;


            var client = new QdrantClient("localhost", 6334);


            await client.DeleteCollectionAsync("{collection_name}");

            '
          language: csharp
      - code-samples:
        - code: 'from qdrant_client import QdrantClient


            client = QdrantClient(url="http://localhost:6333")


            client.delete_collection(collection_name="{collection_name}")

            '
          language: python
      - code-samples:
        - code: "import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.deleteCollectionAsync(\"\
            {collection_name}\").get();\n"
          language: java
      - code-samples:
        - code: 'use qdrant_client::Qdrant;


            let client = Qdrant::from_url("http://localhost:6334").build()?;


            client.delete_collection("{collection_name}").await?;

            '
          language: rust
      - code-samples:
        - code: 'import { QdrantClient } from ''@qdrant/qdrant-js'';


            const client = new QdrantClient({url: ''http://127.0.0.1:6333''});


            client.deleteCollection("{collection_name}");

            '
          language: typescript
    get:
      description: Retrieves parameters from the specified collection.
      summary: Get collection details
      tags:
      - Collections
      x-fern-examples:
      - code-samples:
        - code: 'using Qdrant.Client;


            var client = new QdrantClient("localhost", 6334);


            await client.GetCollectionInfoAsync("{collection_name}");

            '
          language: csharp
      - code-samples:
        - code: 'from qdrant_client import QdrantClient


            client = QdrantClient(url="http://localhost:6333")


            client.get_collection("{collection_name}")

            '
          language: python
      - code-samples:
        - code: "import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.getCollectionInfoAsync(\"\
            {collection_name}\").get();\n"
          language: java
      - code-samples:
        - code: 'use qdrant_client::Qdrant;


            let client = Qdrant::from_url("http://localhost:6334").build()?;


            client.collection_info("{collection_name}").await?;

            '
          language: rust
      - code-samples:
        - code: 'import { QdrantClient } from "@qdrant/js-client-rest";


            const client = new QdrantClient({ host: "localhost", port: 6333 });


            client.getCollection("{collection_name}");

            '
          language: typescript
    patch:
      description: Updates the parameters of the specified collection.
      summary: Update collection parameters
      tags:
      - Collections
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new\
            \ QdrantClient(\"localhost\", 6334);\n\nawait client.UpdateCollectionAsync(\n\
            \  collectionName: \"{collection_name}\",\n  optimizersConfig: new OptimizersConfigDiff\
            \ { IndexingThreshold = 10000 }\n);\n"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.update_collection(\n    collection_name=\"\
            {collection_name}\",\n    optimizer_config=models.OptimizersConfigDiff(indexing_threshold=10000),\n\
            )\n"
          language: python
      - code-samples:
        - code: "import static io.qdrant.client.ShardKeyFactory.shardKey;\n\nimport\
            \ io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\nimport\
            \ io.qdrant.client.grpc.Collections.UpdateCollection;\n\nQdrantClient\
            \ client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.updateCollectionAsync(\n\
            \    UpdateCollection.newBuilder()\n        .setCollectionName(\"{collection_name}\"\
            )\n        .setOptimizersConfig(\n            OptimizersConfigDiff.newBuilder().setIndexingThreshold(10000).build())\n\
            \        .build());\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{OptimizersConfigDiffBuilder, UpdateCollectionBuilder};\n\
            use qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\"\
            ).build()?;\n\nclient\n    .update_collection(\n        UpdateCollectionBuilder::new(\"\
            {collection_name}\").optimizers_config(\n            OptimizersConfigDiffBuilder::default().indexing_threshold(10_000),\n\
            \        ),\n    )\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.updateCollection(\"{collection_name}\", {\n  optimizers_config:\
            \ {\n    indexing_threshold: 10000,\n  },\n});\n"
          language: typescript
    put:
      description: Creates a new collection with the given parameters.
      summary: Create a collection
      tags:
      - Collections
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new\
            \ QdrantClient(\"localhost\", 6334);\n\nawait client.CreateCollectionAsync(\n\
            \tcollectionName: \"{collection_name}\",\n\tvectorsConfig: new VectorParams\
            \ { Size = 100, Distance = Distance.Cosine }\n);\n\n// Or with sparse\
            \ vectors\n\nawait client.CreateCollectionAsync(\n\tcollectionName: \"\
            {collection_name}\",\n\tsparseVectorsConfig: (\"splade-model-name\", new\
            \ SparseVectorParams{\n        Index = new SparseIndexConfig {\n     \
            \       OnDisk = false,\n        }\n    })\n);"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.create_collection(\n    collection_name=\"\
            {collection_name}\",\n    vectors_config=models.VectorParams(size=100,\
            \ distance=models.Distance.COSINE),\n)\n"
          language: python
      - code-samples:
        - code: "import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nimport io.qdrant.client.grpc.Collections.Distance;\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\
            \nQdrantClient client = new QdrantClient(\n    QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.createCollectionAsync(\"\
            {collection_name}\",\n        VectorParams.newBuilder().setDistance(Distance.Cosine).setSize(100).build()).get();\n\
            \n// Or with sparse vectors\n\nclient.createCollectionAsync(\n    CreateCollection.newBuilder()\n\
            \        .setCollectionName(\"{collection_name}\")\n        .setSparseVectorsConfig(\n\
            \            Collections.SparseVectorConfig.newBuilder().putMap(\n   \
            \             \"splade-model-name\",\n                Collections.SparseVectorParams.newBuilder()\n\
            \                    .setIndex(\n                        Collections.SparseIndexConfig\n\
            \                            .newBuilder()\n                         \
            \   .setOnDisk(false)\n                            .build()\n        \
            \            ).build()\n            ).build()\n        ).build()\n).get();"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{CreateCollectionBuilder, Distance, VectorParamsBuilder};\n\
            use qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\"\
            ).build()?;\n\nclient\n    .create_collection(\n        CreateCollectionBuilder::new(\"\
            {collection_name}\")\n            .vectors_config(VectorParamsBuilder::new(100,\
            \ Distance::Cosine)),\n    )\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.createCollection(\"{collection_name}\", {\n  vectors: { size: 100,\
            \ distance: \"Cosine\" },\n});\n\n// or with sparse vectors\n\nclient.createCollection(\"\
            {collection_name}\", {\n  vectors: { size: 100, distance: \"Cosine\" },\n\
            \  sparse_vectors: {\n    \"splade-model-name\": {\n      index: {\n \
            \       on_disk: false\n      }\n    }\n  }\n});"
          language: typescript
      - code-samples:
        - code: "# Minimal curl command to create a collection with a vector field\n\
            \ncurl -X PUT http://localhost:6333/collections/collection_name \\\n \
            \    -H \"api-key: <apiKey>\" \\\n     -H \"Content-Type: application/json\"\
            \ \\\n     -d '{\n            \"vectors\": {\n                \"size\"\
            : 300,\n                \"distance\": \"Cosine\"\n            } \n   \
            \     }'\n\n# Or with a sparse vector field\n\ncurl -X PUT http://localhost:6333/collections/collection_name\
            \ \\\n     -H \"api-key: <apiKey>\" \\\n     -H \"Content-Type: application/json\"\
            \ \\\n     -d '{\n            \"vectors\": {\n                \"size\"\
            : 1536,\n                \"distance\": \"Cosine\"\n            },\n  \
            \          \"sparse_vectors\": {\n                \"splade-model-name\"\
            : {\n                    \"index\": {\n                        \"on_disk\"\
            : true\n                    }\n                }\n            }\n    \
            \    }'\n"
          language: curl
  /collections/{collection_name}/aliases: {}
  /collections/{collection_name}/cluster:
    get:
      description: Retrieves cluster details for a specified collection.
      summary: Retrieve cluster details
      tags:
      - Distributed
    post:
      description: Updates the cluster configuration for a specified collection.
      summary: Update cluster setup
      tags:
      - Distributed
  /collections/{collection_name}/exists: {}
  /collections/{collection_name}/index:
    put:
      description: Creates a payload index for a field in the specified collection.
      summary: Create payload index
      tags:
      - Indexes
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\"\
            , 6334);\n\nawait client.CreatePayloadIndexAsync(\n  collectionName: \"\
            {collection_name}\",\n  fieldName: \"name_of_the_field_to_index\"\n);\n"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.create_payload_index(\n    collection_name=\"\
            {collection_name}\",\n    field_name=\"name_of_the_field_to_index\",\n\
            \    field_schema=\"keyword\",\n)\n"
          language: python
      - code-samples:
        - code: "import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\n\nQdrantClient\
            \ client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.createPayloadIndexAsync(\n\
            \                \"{collection_name}\",\n                \"{field_name}\"\
            ,\n                PayloadSchemaType.Keyword,\n                null,\n\
            \                true,\n                null,\n                null);\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{CreateFieldIndexCollectionBuilder, FieldType};\n\
            use qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\"\
            ).build()?;\n\nclient\n    .create_field_index(\n        CreateFieldIndexCollectionBuilder::new(\n\
            \            \"{collection_name}\",\n            \"{field_name}\",\n \
            \           FieldType::Keyword,\n        ),\n    )\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.createPayloadIndex(\"{collection_name}\", {\n  field_name: \"{field_name}\"\
            ,\n  field_schema: \"keyword\",\n});\n"
          language: typescript
  /collections/{collection_name}/index/{field_name}:
    delete:
      description: Deletes a payload index for a field in the specified collection.
      summary: Delete payload index
      tags:
      - Indexes
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\"\
            , 6334);\n\nawait client.DeletePayloadIndexAsync(\n  collectionName: \"\
            {collection_name}\",\n  fieldName: \"name_of_the_field_to_index\"\n);\n"
          language: csharp
      - code-samples:
        - code: 'from qdrant_client import QdrantClient


            client = QdrantClient(url="http://localhost:6333")


            client.delete_payload_index("{collection_name}", "{field_name}");

            '
          language: python
      - code-samples:
        - code: "import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.deletePayloadIndexAsync(\"\
            {collection_name}\", \"{field_name}\", true, null, null).get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::DeleteFieldIndexCollectionBuilder;\nuse\
            \ qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\"\
            ).build()?;\n\nclient\n    .delete_field_index(DeleteFieldIndexCollectionBuilder::new(\n\
            \        \"{collection_name}\",\n        \"{field_name}\",\n    ))\n \
            \   .await?;\n"
          language: rust
      - code-samples:
        - code: 'import { QdrantClient } from "@qdrant/js-client-rest";


            const client = new QdrantClient({ host: "localhost", port: 6333 });


            client.deletePayloadIndex("{collection_name}", "{field_name}");

            '
          language: typescript
  /collections/{collection_name}/points:
    post:
      description: Retrieves all details from multiple points.
      summary: Retrieve points
      tags:
      - Points
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\n\nvar client = new QdrantClient(\"localhost\"\
            , 6334);\n\nawait client.RetrieveAsync(\n  collectionName: \"{collection_name}\"\
            ,\n  ids: [0, 30, 100],\n  withPayload: false,\n  withVectors: false\n\
            );\n"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.retrieve(\n    collection_name=\"{collection_name}\"\
            ,\n    ids=[0, 3, 100],\n)\n"
          language: python
      - code-samples:
        - code: "import static io.qdrant.client.PointIdFactory.id;\n\nimport java.util.List;\n\
            \nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient\n    .retrieveAsync(\"{collection_name}\"\
            , List.of(id(0), id(30), id(100)), false, false, null)\n    .get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::GetPointsBuilder;\nuse qdrant_client::Qdrant;\n\
            \nlet client = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\
            \nclient\n    .get_points(GetPointsBuilder::new(\n        \"{collection_name}\"\
            ,\n        vec![0.into(), 30.into(), 100.into()],\n    ))\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.retrieve(\"{collection_name}\", {\n  ids: [0, 3, 100],\n});\n"
          language: typescript
    put:
      description: Performs the insert + update action on specified points. Any point
        with an existing {id} will be overwritten.
      summary: Upsert points
      tags:
      - Points
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new\
            \ QdrantClient(\"localhost\", 6334);\n\nawait client.UpsertAsync(\n  collectionName:\
            \ \"{collection_name}\",\n  points: new List<PointStruct>\n  {\n    new()\n\
            \    {\n      Id = 1,\n      Vectors = new[] { 0.9f, 0.1f, 0.1f },\n \
            \     Payload = { [\"city\"] = \"red\" }\n    },\n    new()\n    {\n \
            \     Id = 2,\n      Vectors = new[] { 0.1f, 0.9f, 0.1f },\n      Payload\
            \ = { [\"city\"] = \"green\" }\n    },\n    new()\n    {\n      Id = 3,\n\
            \      Vectors = new[] { 0.1f, 0.1f, 0.9f },\n      Payload = { [\"city\"\
            ] = \"blue\" }\n    }\n  }\n);\n"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.upsert(\n    collection_name=\"{collection_name}\"\
            ,\n    points=[\n        models.PointStruct(\n            id=1,\n    \
            \        payload={\n                \"color\": \"red\",\n            },\n\
            \            vector=[0.9, 0.1, 0.1],\n        ),\n        models.PointStruct(\n\
            \            id=2,\n            payload={\n                \"color\":\
            \ \"green\",\n            },\n            vector=[0.1, 0.9, 0.1],\n  \
            \      ),\n        models.PointStruct(\n            id=3,\n          \
            \  payload={\n                \"color\": \"blue\",\n            },\n \
            \           vector=[0.1, 0.1, 0.9],\n        ),\n    ],\n)\n"
          language: python
      - code-samples:
        - code: "import static io.qdrant.client.PointIdFactory.id;\nimport static\
            \ io.qdrant.client.VectorFactory.vector;\nimport static io.qdrant.client.VectorsFactory.namedVectors;\n\
            \nimport java.util.List;\nimport java.util.Map;\n\nimport io.qdrant.client.QdrantClient;\n\
            import io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Points.PointStruct;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient\n    .upsertAsync(\n   \
            \     \"{collection_name}\",\n        List.of(\n            PointStruct.newBuilder()\n\
            \                .setId(id(1))\n                .setVectors(\n       \
            \             namedVectors(\n                        Map.of(\n       \
            \                     \"image\",\n                            vector(List.of(0.9f,\
            \ 0.1f, 0.1f, 0.2f)),\n                            \"text\",\n       \
            \                     vector(List.of(0.4f, 0.7f, 0.1f, 0.8f, 0.1f, 0.1f,\
            \ 0.9f, 0.2f)))))\n                .build(),\n            PointStruct.newBuilder()\n\
            \                .setId(id(2))\n                .setVectors(\n       \
            \             namedVectors(\n                        Map.of(\n       \
            \                     \"image\",\n                            List.of(0.2f,\
            \ 0.1f, 0.3f, 0.9f),\n                            \"text\",\n        \
            \                    List.of(0.5f, 0.2f, 0.7f, 0.4f, 0.7f, 0.2f, 0.3f,\
            \ 0.9f))))\n                .build()))\n    .get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{PointStruct, UpsertPointsBuilder};\n\
            use qdrant_client::{Qdrant, Payload};\nuse serde_json::json;\n\nlet client\
            \ = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nclient\n\
            \    .upsert_points(\n        UpsertPointsBuilder::new(\n            \"\
            {collection_name}\",\n            vec![\n                PointStruct::new(\n\
            \                    1,\n                    vec![0.9, 0.1, 0.1],\n  \
            \                  Payload::try_from(json!(\n                        {\"\
            color\": \"red\"}\n                    ))\n                    .unwrap(),\n\
            \                ),\n                PointStruct::new(\n             \
            \       2,\n                    vec![0.1, 0.9, 0.1],\n               \
            \     Payload::try_from(json!(\n                        {\"color\": \"\
            green\"}\n                    ))\n                    .unwrap(),\n   \
            \             ),\n                PointStruct::new(\n                \
            \    3,\n                    vec![0.1, 0.1, 0.9],\n                  \
            \  Payload::try_from(json!(\n                        {\"color\": \"blue\"\
            }\n                    ))\n                    .unwrap(),\n          \
            \      ),\n            ],\n        )\n        .wait(true),\n    )\n  \
            \  .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.upsert(\"{collection_name}\", {\n  points: [\n    {\n      id:\
            \ 1,\n      payload: { color: \"red\" },\n      vector: [0.9, 0.1, 0.1],\n\
            \    },\n    {\n      id: 2,\n      payload: { color: \"green\" },\n \
            \     vector: [0.1, 0.9, 0.1],\n    },\n    {\n      id: 3,\n      payload:\
            \ { color: \"blue\" },\n      vector: [0.1, 0.1, 0.9],\n    },\n  ],\n\
            });\n"
          language: typescript
  /collections/{collection_name}/points/batch: {}
  /collections/{collection_name}/points/count:
    post:
      description: Counts the number of points that match a specified filtering condition.
      summary: Count points
      tags:
      - Points
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\
            \nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.CountAsync(\n\
            \  collectionName: \"{collection_name}\",\n  filter: MatchKeyword(\"color\"\
            , \"red\"),\n  exact: true\n);\n"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.count(\n    collection_name=\"{collection_name}\"\
            ,\n    count_filter=models.Filter(\n        must=[\n            models.FieldCondition(key=\"\
            color\", match=models.MatchValue(value=\"red\")),\n        ]\n    ),\n\
            \    exact=True,\n)\n"
          language: python
      - code-samples:
        - code: "import static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\
            import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nimport io.qdrant.client.grpc.Points.Filter;\n\nQdrantClient client =\
            \ new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334, false).build());\n\
            \nclient\n    .countAsync(\n        \"{collection_name}\",\n        Filter.newBuilder().addMust(matchKeyword(\"\
            color\", \"red\")).build(),\n        true)\n    .get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{Condition, CountPointsBuilder, Filter};\n\
            use qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\"\
            ).build()?;\n\nclient\n    .count(\n        CountPointsBuilder::new(\"\
            {collection_name}\")\n            .filter(Filter::must([Condition::matches(\n\
            \                \"color\",\n                \"red\".to_string(),\n  \
            \          )]))\n            .exact(true),\n    )\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.count(\"{collection_name}\", {\n    filter: {\n        must: [\n\
            \            {\n                key: \"color\",\n                match:\
            \ {\n                    value: \"red\",\n                },\n       \
            \     },\n        ],\n    },\n    exact: true,\n});\n"
          language: typescript
  /collections/{collection_name}/points/delete:
    post:
      description: Deletes specified points from the collection.
      summary: Delete points
      tags:
      - Points
      x-fern-examples:
      - code-samples:
        - code: 'using Qdrant.Client;


            var client = new QdrantClient("localhost", 6334);


            await client.DeleteAsync(collectionName: "{collection_name}", ids: [0,
            3, 100]);


            await client.DeleteAsync(collectionName: "{collection_name}", filter:
            MatchKeyword("color", "red"));

            '
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.delete(\n    collection_name=\"{collection_name}\"\
            ,\n    points_selector=models.PointIdsList(\n        points=[0, 3, 100],\n\
            \    ),\n)\n\nclient.delete(\n    collection_name=\"{collection_name}\"\
            ,\n    points_selector=models.FilterSelector(\n        filter=models.Filter(\n\
            \            must=[\n                models.FieldCondition(\n        \
            \            key=\"color\",\n                    match=models.MatchValue(value=\"\
            red\"),\n                ),\n            ],\n        )\n    ),\n)\n"
          language: python
      - code-samples:
        - code: "import static io.qdrant.client.PointIdFactory.id;\nimport static\
            \ io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport java.util.List;\n\
            \nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nimport io.qdrant.client.grpc.Points.Filter;\n\nQdrantClient client =\
            \ new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"localhost\"\
            , 6334, false).build());\n\nclient.deleteAsync(\"{collection_name}\",\
            \ List.of(id(0), id(3), id(100)));\n\nclient\n    .deleteAsync(\n    \
            \    \"{collection_name}\",\n        Filter.newBuilder().addMust(matchKeyword(\"\
            color\", \"red\")).build())\n    .get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{Condition, DeletePointsBuilder, Filter,\
            \ PointsIdsList};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"\
            http://localhost:6334\").build()?;\n\nclient\n    .delete_points(\n  \
            \      DeletePointsBuilder::new(\"{collection_name}\")\n            .points(PointsIdsList\
            \ {\n                ids: vec![0.into(), 3.into(), 100.into()],\n    \
            \        })\n            .wait(true),\n    )\n    .await?;\n\nclient\n\
            \    .delete_points(\n        DeletePointsBuilder::new(\"{collection_name}\"\
            )\n            .points(Filter::must([Condition::matches(\n           \
            \     \"color\",\n                \"red\".to_string(),\n            )]))\n\
            \            .wait(true),\n    )\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.delete(\"{collection_name}\", {\n  points: [0, 3, 100],\n});\n\n\
            client.delete(\"{collection_name}\", {\n    filter: {\n        must: [\n\
            \            {\n                key: \"color\",\n                match:\
            \ {\n                    value: \"red\",\n                },\n       \
            \     },\n        ],\n    },\n});\n"
          language: typescript
  /collections/{collection_name}/points/discover: {}
  /collections/{collection_name}/points/discover/batch: {}
  /collections/{collection_name}/points/payload:
    post:
      description: Sets payload values for specified points.
      summary: Set payload
      tags:
      - Points
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\nusing Qdrant.Client.Grpc;\n\nvar client = new\
            \ QdrantClient(\"localhost\", 6334);\n\nawait client.SetPayloadAsync(\n\
            \  collectionName: \"{collection_name}\",\n  payload: new Dictionary<string,\
            \ Value> { { \"property1\", \"string\" }, { \"property2\", \"string\"\
            \ } },\n  ids: new ulong[] { 0, 3, 10 }\n);\n"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.set_payload(\n    collection_name=\"\
            {collection_name}\",\n    payload={\n        \"property1\": \"string\"\
            ,\n        \"property2\": \"string\",\n    },\n    points=[0, 3, 10],\n\
            )\n"
          language: python
      - code-samples:
        - code: "import static io.qdrant.client.PointIdFactory.id;\nimport static\
            \ io.qdrant.client.ValueFactory.value;\n\nimport java.util.List;\nimport\
            \ java.util.Map;\n\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient\n    .setPayloadAsync(\n\
            \        \"{collection_name}\",\n        Map.of(\"property1\", value(\"\
            string\"), \"property2\", value(\"string\")),\n        List.of(id(0),\
            \ id(3), id(10)),\n        true,\n        null,\n        null)\n    .get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{PointsIdsList, SetPayloadPointsBuilder};\n\
            use qdrant_client::{Qdrant, Payload};\nuse serde_json::json;\n\nlet client\
            \ = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet payload:\
            \ Payload = json!({\n    \"property1\": \"string\",\n    \"property2\"\
            : \"string\",\n})\n.try_into()\n.unwrap();\n\nclient\n    .set_payload(\n\
            \        SetPayloadPointsBuilder::new(\"{collection_name}\", payload)\n\
            \            .points_selector(PointsIdsList {\n                ids: vec![0.into(),\
            \ 3.into(), 10.into()],\n            })\n            .wait(true),\n  \
            \  )\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.setPayload(\"{collection_name}\", {\n  payload: {\n    property1:\
            \ \"string\",\n    property2: \"string\",\n  },\n  points: [0, 3, 10],\n\
            });\n"
          language: typescript
  /collections/{collection_name}/points/payload/clear:
    post:
      description: Removes the entire payload for specified points.
      summary: Clear payload
      tags:
      - Points
      x-fern-examples:
      - code-samples:
        - code: 'using Qdrant.Client;


            var client = new QdrantClient("localhost", 6334);


            await client.ClearPayloadAsync("{collection_name}", [0, 3, 10]);

            '
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.clear_payload(\n    collection_name=\"\
            {collection_name}\",\n    points_selector=[0, 3, 100],\n)\n"
          language: python
      - code-samples:
        - code: "import java.util.List;\n\nimport static io.qdrant.client.PointIdFactory.id;\n\
            \nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.clearPayloadAsync(\"{collection_name}\"\
            , List.of(id(0), id(3), id(100)), null, null, null)\n                .get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{ClearPayloadPointsBuilder, PointsIdsList};\n\
            use qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\"\
            ).build()?;\n\nclient\n    .clear_payload(ClearPayloadPointsBuilder::new(\"\
            {collection_name}\").points(\n        PointsIdsList {\n            ids:\
            \ vec![0.into(), 3.into(), 100.into()],\n        },\n    ))\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.clearPayload(\"{collection_name}\", {\n  points: [0, 3, 100],\n\
            });\n"
          language: typescript
  /collections/{collection_name}/points/payload/delete:
    post:
      description: Deletes a specified key payload for points.
      summary: Delete payload
      tags:
      - Points
      x-fern-examples:
      - code-samples:
        - code: 'using Qdrant.Client;


            var client = new QdrantClient("localhost", 6334);


            await client.DeletePayloadAsync("{collection_name}", ["color", "price"],
            [0, 3, 10]);

            '
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.delete_payload(\n    collection_name=\"\
            {collection_name}\",\n    keys=[\"color\", \"price\"],\n    points=[0,\
            \ 3, 100],\n)\n"
          language: python
      - code-samples:
        - code: "import java.util.List;\n\nimport static io.qdrant.client.PointIdFactory.id;\n\
            \nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient\n    .deletePayloadAsync(\n\
            \        \"{collection_name}\",\n        List.of(\"color\", \"price\"\
            ),\n        List.of(id(0), id(3), id(100)),\n        true,\n        null,\n\
            \        null)\n    .get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{DeletePayloadPointsBuilder, PointsIdsList};\n\
            use qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\"\
            ).build()?;\n\nclient\n    .delete_payload(\n        DeletePayloadPointsBuilder::new(\n\
            \            \"{collection_name}\",\n            vec![\"color\".to_string(),\
            \ \"price\".to_string()],\n        )\n        .points_selector(PointsIdsList\
            \ {\n            ids: vec![0.into(), 3.into(), 100.into()],\n        })\n\
            \        .wait(true),\n    )\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.deletePayload(\"{collection_name}\", {\n  keys: [\"color\", \"\
            price\"],\n  points: [0, 3, 100],\n});\n"
          language: typescript
  /collections/{collection_name}/points/query: {}
  /collections/{collection_name}/points/query/batch: {}
  /collections/{collection_name}/points/recommend:
    post:
      description: Retrieves points that are closer to stored positive examples and
        further from negative examples.
      summary: Recommend points
      tags:
      - Search
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\
            \nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.RecommendAsync(\n\
            \    \"{collection_name}\",\n    positive: new ulong[] { 100, 231 },\n\
            \    negative: new ulong[] { 718 },\n    filter: MatchKeyword(\"city\"\
            , \"London\"),\n    limit: 3\n);\n"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.recommend(\n    collection_name=\"\
            {collection_name}\",\n    positive=[100, 231],\n    negative=[718, [0.2,\
            \ 0.3, 0.4, 0.5]],\n    strategy=models.RecommendStrategy.AVERAGE_VECTOR,\n\
            \    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n\
            \                key=\"city\",\n                match=models.MatchValue(\n\
            \                    value=\"London\",\n                ),\n         \
            \   )\n        ]\n    ),\n    limit=3,\n)\n"
          language: python
      - code-samples:
        - code: "import java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\
            import static io.qdrant.client.PointIdFactory.id;\nimport static io.qdrant.client.VectorFactory.vector;\n\
            \nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.RecommendPoints;\n\
            import io.qdrant.client.grpc.Points.RecommendStrategy;\n\nQdrantClient\
            \ client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\"\
            , 6334, false).build());\n\nclient\n    .recommendAsync(\n        RecommendPoints.newBuilder()\n\
            \            .setCollectionName(\"{collection_name}\")\n            .addAllPositive(List.of(id(100),\
            \ id(200)))\n            .addAllPositiveVectors(List.of(vector(100.0f,\
            \ 231.0f)))\n            .addAllNegative(List.of(id(718)))\n         \
            \   .addAllPositiveVectors(List.of(vector(0.2f, 0.3f, 0.4f, 0.5f)))\n\
            \            .setStrategy(RecommendStrategy.AverageVector)\n         \
            \   .setFilter(Filter.newBuilder().addMust(matchKeyword(\"city\", \"London\"\
            )))\n            .setLimit(3)\n            .build())\n    .get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{Condition, Filter, RecommendPointsBuilder,\
            \ RecommendStrategy};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"\
            http://localhost:6334\").build()?;\n\nclient\n    .recommend(\n      \
            \  RecommendPointsBuilder::new(\"{collection_name}\", 3)\n           \
            \ .add_positive(100)\n            .add_positive(200)\n            .add_positive(vec![100.0,\
            \ 231.0])\n            .add_negative(718)\n            .add_negative(vec![0.2,\
            \ 0.3, 0.4, 0.5])\n            .strategy(RecommendStrategy::AverageVector)\n\
            \            .filter(Filter::must([Condition::matches(\n             \
            \   \"city\",\n                \"London\".to_string(),\n            )])),\n\
            \    )\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.recommend(\"{collection_name}\", {\n    positive: [100, 231],\n\
            \    negative: [718, [0.2, 0.3, 0.4, 0.5]],\n    strategy: \"average_vector\"\
            ,\n    filter: {\n        must: [\n            {\n                key:\
            \ \"city\",\n                match: {\n                    value: \"London\"\
            ,\n                },\n            },\n        ],\n    },\n    limit:\
            \ 3,\n});\n"
          language: typescript
  /collections/{collection_name}/points/recommend/batch:
    post:
      description: Retrieves points in batches that are closer to stored positive
        examples and further from negative examples.
      summary: Recommend batch points
      tags:
      - Search
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\
            \nvar client = new QdrantClient(\"localhost\", 6334);\n\nvar filter =\
            \ MatchKeyword(\"city\", \"london\");\n\nawait client.RecommendBatchAsync(\n\
            \  collectionName: \"{collection_name}\",\n  recommendSearches:\n  [\n\
            \    new()\n    {\n      CollectionName = \"{collection_name}\",\n   \
            \   Positive = { new PointId[] { 100, 231 } },\n      Negative = { new\
            \ PointId[] { 718 } },\n      Limit = 3,\n      Filter = filter,\n   \
            \ },\n    new()\n    {\n      CollectionName = \"{collection_name}\",\n\
            \      Positive = { new PointId[] { 200, 67 } },\n      Negative = { new\
            \ PointId[] { 300 } },\n      Limit = 3,\n      Filter = filter,\n   \
            \ }\n  ]\n);\n"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nrecommend_queries = [\n    models.RecommendRequest(\n\
            \        positive=[100, 231], negative=[718], filter=filter_, limit=3\n\
            \    ),\n    models.RecommendRequest(positive=[200, 67], negative=[300],\
            \ limit=3),\n]\n\nclient.recommend_batch(collection_name=\"{collection_name}\"\
            , requests=recommend_queries)\n"
          language: python
      - code-samples:
        - code: "import java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\
            import static io.qdrant.client.PointIdFactory.id;\n\nimport io.qdrant.client.QdrantClient;\n\
            import io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Points.Filter;\n\
            import io.qdrant.client.grpc.Points.RecommendPoints;\n\nQdrantClient client\
            \ =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"localhost\", 6334,\
            \ false).build());\n\nFilter filter = Filter.newBuilder().addMust(matchKeyword(\"\
            city\", \"London\")).build();\n\nList<RecommendPoints> recommendQueries\
            \ =\n    List.of(\n        RecommendPoints.newBuilder()\n            .addAllPositive(List.of(id(100),\
            \ id(231)))\n            .addAllNegative(List.of(id(718)))\n         \
            \   .setFilter(filter)\n            .setLimit(3)\n            .build(),\n\
            \        RecommendPoints.newBuilder()\n            .addAllPositive(List.of(id(200),\
            \ id(67)))\n            .addAllNegative(List.of(id(300)))\n          \
            \  .setFilter(filter)\n            .setLimit(3)\n            .build());\n\
            \nclient.recommendBatchAsync(\"{collection_name}\", recommendQueries,\
            \ null).get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{\n    Condition, Filter, RecommendBatchPointsBuilder,\
            \ RecommendPointsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client\
            \ = Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet filter\
            \ = Filter::must([Condition::matches(\"city\", \"London\".to_string())]);\n\
            let recommend_queries = vec![\n    RecommendPointsBuilder::new(\"{collection_name}\"\
            , 3)\n        .add_positive(100)\n        .add_positive(231)\n       \
            \ .add_negative(718)\n        .filter(filter.clone())\n        .build(),\n\
            \    RecommendPointsBuilder::new(\"{collection_name}\", 3)\n        .add_positive(200)\n\
            \        .add_positive(67)\n        .add_negative(300)\n        .filter(filter.clone())\n\
            \        .build(),\n];\n\nclient\n    .recommend_batch(RecommendBatchPointsBuilder::new(\n\
            \        \"{collection_name}\",\n        recommend_queries,\n    ))\n\
            \    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            const searches = [\n    {\n        positive: [100, 231],\n        negative:\
            \ [718],\n        limit: 3,\n    },\n    {\n        positive: [200, 67],\n\
            \        negative: [300],\n        limit: 3,\n    },\n];\n\nclient.recommend_batch(\"\
            {collection_name}\", {\n    searches,\n});\n"
          language: typescript
  /collections/{collection_name}/points/recommend/groups: {}
  /collections/{collection_name}/points/scroll:
    post:
      description: 'Returns all points in a page-by-page manner.

        By default, all resulting points are sorted by {id}.

        To query the next page specify the last {id} in the offset field.

        Additionally, you can specify filters and sorting options.

        '
      summary: Scroll points
      tags:
      - Points
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\
            \nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.ScrollAsync(\n\
            \  collectionName: \"{collection_name}\",\n  filter: MatchKeyword(\"color\"\
            , \"red\"),\n  limit: 1,\n  payloadSelector: true\n);\n"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.scroll(\n    collection_name=\"{collection_name}\"\
            ,\n    scroll_filter=models.Filter(\n        must=[\n            models.FieldCondition(key=\"\
            color\", match=models.MatchValue(value=\"red\")),\n        ]\n    ),\n\
            \    limit=1,\n    with_payload=True,\n    with_vectors=False,\n)\n"
          language: python
      - code-samples:
        - code: "import static io.qdrant.client.ConditionFactory.matchKeyword;\nimport\
            \ static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\nimport\
            \ io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient\n    .scrollAsync(\n   \
            \     ScrollPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\"\
            )\n            .setFilter(Filter.newBuilder().addMust(matchKeyword(\"\
            color\", \"red\")).build())\n            .setLimit(1)\n            .setWithPayload(enable(true))\n\
            \            .build())\n    .get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{Condition, Filter, ScrollPointsBuilder};\n\
            use qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"http://localhost:6334\"\
            ).build()?;\n\nclient\n    .scroll(\n        ScrollPointsBuilder::new(\"\
            {collection_name}\")\n            .filter(Filter::must([Condition::matches(\n\
            \                \"color\",\n                \"red\".to_string(),\n  \
            \          )]))\n            .limit(1)\n            .with_payload(true)\n\
            \            .with_vectors(false),\n    )\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.scroll(\"{collection_name}\", {\n    filter: {\n        must: [\n\
            \            {\n                key: \"color\",\n                match:\
            \ {\n                    value: \"red\",\n                },\n       \
            \     },\n        ],\n    },\n    limit: 1,\n    with_payload: true,\n\
            \    with_vector: false,\n});\n"
          language: typescript
  /collections/{collection_name}/points/search:
    post:
      description: Retrieves the closest points based on vector similarity and given
        filtering conditions.
      summary: Search points
      tags:
      - Search
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\nusing static Qdrant.Client.Grpc.Conditions;\n\
            \nvar client = new QdrantClient(\"localhost\", 6334);\n\nawait client.SearchAsync(\n\
            \  collectionName: \"{collection_name}\",\n  vector: new float[] { 0.2f,\
            \ 0.1f, 0.9f, 0.7f },\n  filter: MatchKeyword(\"city\", \"London\"),\n\
            \  limit: 3\n);\n"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nclient.search(\n    collection_name=\"{collection_name}\"\
            ,\n    query_filter=models.Filter(\n        must=[\n            models.FieldCondition(\n\
            \                key=\"city\",\n                match=models.MatchValue(\n\
            \                    value=\"London\",\n                ),\n         \
            \   )\n        ]\n    ),\n    query_vector=[0.2, 0.1, 0.9, 0.7],\n   \
            \ limit=3,\n)\n"
          language: python
      - code-samples:
        - code: "import static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\
            import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.SearchPoints;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient\n    .searchAsync(\n   \
            \     SearchPoints.newBuilder()\n            .setCollectionName(\"{collection_name}\"\
            )\n            .setFilter(Filter.newBuilder().addMust(matchKeyword(\"\
            city\", \"London\")).build())\n            .addAllVector(List.of(0.2f,\
            \ 0.1f, 0.9f, 0.7f))\n            .setLimit(3)\n            .build())\n\
            \    .get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{Condition, Filter, SearchParamsBuilder,\
            \ SearchPointsBuilder};\nuse qdrant_client::Qdrant;\n\nlet client = Qdrant::from_url(\"\
            http://localhost:6334\").build()?;\n\nclient\n    .search_points(\n  \
            \      SearchPointsBuilder::new(\"{collection_name}\", vec![0.2, 0.1,\
            \ 0.9, 0.7], 3)\n            .filter(Filter::must([Condition::matches(\n\
            \                \"city\",\n                \"London\".to_string(),\n\
            \            )]))\n            .params(SearchParamsBuilder::default().hnsw_ef(128).exact(false)),\n\
            \    )\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            client.search(\"{collection_name}\", {\n    filter: {\n        must: [\n\
            \            {\n                key: \"city\",\n                match:\
            \ {\n                    value: \"London\",\n                },\n    \
            \        },\n        ],\n    },\n    vector: [0.2, 0.1, 0.9, 0.7],\n \
            \   limit: 3,\n});\n"
          language: typescript
  /collections/{collection_name}/points/search/batch:
    post:
      description: Retrieves the closest points in batches based on vector similarity
        and given filtering conditions.
      summary: Search batch points
      tags:
      - Search
      x-fern-examples:
      - code-samples:
        - code: "using Qdrant.Client;\nusing Qdrant.Client.Grpc;\nusing static Qdrant.Client.Grpc.Conditions;\n\
            \nvar client = new QdrantClient(\"localhost\", 6334);\n\nvar filter =\
            \ MatchKeyword(\"city\", \"London\");\n\nvar searches = new List<SearchPoints>\n\
            {\n  new()\n  {\n    Vector = { new float[] { 0.2f, 0.1f, 0.9f, 0.7f }\
            \ },\n    Filter = filter,\n    Limit = 3\n  },\n  new()\n  {\n    Vector\
            \ = { new float[] { 0.5f, 0.3f, 0.2f, 0.3f } },\n    Filter = filter,\n\
            \    Limit = 3\n  }\n};\n\nawait client.SearchBatchAsync(collectionName:\
            \ \"{collection_name}\", searches: searches);\n"
          language: csharp
      - code-samples:
        - code: "from qdrant_client import QdrantClient, models\n\nclient = QdrantClient(url=\"\
            http://localhost:6333\")\n\nfilter_ = models.Filter(\n    must=[\n   \
            \     models.FieldCondition(\n            key=\"city\",\n            match=models.MatchValue(\n\
            \                value=\"London\",\n            ),\n        )\n    ]\n\
            )\n\nsearch_queries = [\n    models.SearchRequest(vector=[0.2, 0.1, 0.9,\
            \ 0.7], filter=filter_, limit=3),\n    models.SearchRequest(vector=[0.5,\
            \ 0.3, 0.2, 0.3], filter=filter_, limit=3),\n]\n\nclient.search_batch(collection_name=\"\
            {collection_name}\", requests=search_queries)\n"
          language: python
      - code-samples:
        - code: "import java.util.List;\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\
            \nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.SearchPoints;\n\
            \nQdrantClient client =\n    new QdrantClient(QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nFilter filter = Filter.newBuilder().addMust(matchKeyword(\"\
            city\", \"London\")).build();\nList<SearchPoints> searches =\n    List.of(\n\
            \        SearchPoints.newBuilder()\n            .addAllVector(List.of(0.2f,\
            \ 0.1f, 0.9f, 0.7f))\n            .setFilter(filter)\n            .setLimit(3)\n\
            \            .build(),\n        SearchPoints.newBuilder()\n          \
            \  .addAllVector(List.of(0.5f, 0.3f, 0.2f, 0.3f))\n            .setFilter(filter)\n\
            \            .setLimit(3)\n            .build());\nclient.searchBatchAsync(\"\
            {collection_name}\", searches, null).get();\n"
          language: java
      - code-samples:
        - code: "use qdrant_client::qdrant::{\n    Condition, Filter, SearchBatchPointsBuilder,\
            \ SearchPointsBuilder,\n};\nuse qdrant_client::Qdrant;\n\nlet client =\
            \ Qdrant::from_url(\"http://localhost:6334\").build()?;\n\nlet filter\
            \ = Filter::must([Condition::matches(\"city\", \"London\".to_string())]);\n\
            \nlet searches = vec![\n    SearchPointsBuilder::new(\"{collection_name}\"\
            , vec![0.2, 0.1, 0.9, 0.7], 3)\n        .filter(filter.clone())\n    \
            \    .build(),\n    SearchPointsBuilder::new(\"{collection_name}\", vec![0.5,\
            \ 0.3, 0.2, 0.3], 3)\n        .filter(filter.clone())\n        .build(),\n\
            ];\n\nclient\n    .search_batch_points(SearchBatchPointsBuilder::new(\"\
            {collection_name}\", searches))\n    .await?;\n"
          language: rust
      - code-samples:
        - code: "import { QdrantClient } from \"@qdrant/js-client-rest\";\n\nconst\
            \ client = new QdrantClient({ host: \"localhost\", port: 6333 });\n\n\
            const filter = {\n    must: [\n        {\n            key: \"city\",\n\
            \            match: {\n                value: \"London\",\n          \
            \  },\n        },\n    ],\n};\n\nconst searches = [\n    {\n        vector:\
            \ [0.2, 0.1, 0.9, 0.7],\n        filter,\n        limit: 3,\n    },\n\
            \    {\n        vector: [0.5, 0.3, 0.2, 0.3],\n        filter,\n     \
            \   limit: 3,\n    },\n];\n\nclient.searchBatch(\"{collection_name}\"\
            , {\n    searches,\n});\n"
          language: typescript
  /collections/{collection_name}/points/search/groups: {}
  /collections/{collection_name}/points/vectors: {}
  /collections/{collection_name}/points/vectors/delete: {}
  /collections/{collection_name}/points/{id}:
    get:
      description: Retrieves all details from a single point.
      summary: Retrieve a point
      tags:
      - Points
  /collections/{collection_name}/shards: {}
  /collections/{collection_name}/shards/delete: {}
  /collections/{collection_name}/shards/{shard_id}/snapshots: {}
  /collections/{collection_name}/shards/{shard_id}/snapshots/recover: {}
  /collections/{collection_name}/shards/{shard_id}/snapshots/upload: {}
  /collections/{collection_name}/shards/{shard_id}/snapshots/{snapshot_name}: {}
  /collections/{collection_name}/snapshots:
    get:
      description: Retrieves a list of all snapshots for a specified collection.
      summary: List all snapshots (collection)
      tags:
      - Snapshots
      x-fern-examples:
      - code-samples:
        - code: 'using Qdrant.Client;


            var client = new QdrantClient("localhost", 6334);


            await client.ListSnapshotsAsync("{collection_name}");

            '
          language: csharp
      - code-samples:
        - code: 'from qdrant_client import QdrantClient


            client = QdrantClient(url="http://localhost:6333")


            client.list_snapshots(collection_name="{collection_name}")

            '
          language: python
      - code-samples:
        - code: "import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.listSnapshotAsync(\"{collection_name}\"\
            ).get();\n"
          language: java
      - code-samples:
        - code: 'use qdrant_client::Qdrant;


            let client = Qdrant::from_url("http://localhost:6334").build()?;


            client.list_snapshots("{collection_name}").await?;

            '
          language: rust
      - code-samples:
        - code: 'import { QdrantClient } from "@qdrant/js-client-rest";


            const client = new QdrantClient({ host: "localhost", port: 6333 });


            client.listSnapshots("{collection_name}");

            '
          language: typescript
    post:
      description: Creates a new snapshot for a specified collection.
      summary: Create a snapshot (collection)
      tags:
      - Snapshots
      x-fern-examples:
      - code-samples:
        - code: 'using Qdrant.Client;


            var client = new QdrantClient("localhost", 6334);


            await client.CreateSnapshotAsync("{collection_name}");

            '
          language: csharp
      - code-samples:
        - code: 'from qdrant_client import QdrantClient


            client = QdrantClient(url="http://localhost:6333")


            client.create_snapshot(collection_name="{collection_name}")

            '
          language: python
      - code-samples:
        - code: "import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.createSnapshotAsync(\"{collection_name}\"\
            ).get();\n"
          language: java
      - code-samples:
        - code: 'use qdrant_client::Qdrant;


            let client = Qdrant::from_url("http://localhost:6334").build()?;


            client.create_snapshot("{collection_name}").await?;

            '
          language: rust
      - code-samples:
        - code: 'import { QdrantClient } from "@qdrant/js-client-rest";


            const client = new QdrantClient({ host: "localhost", port: 6333 });


            client.createSnapshot("{collection_name}");

            '
          language: typescript
  /collections/{collection_name}/snapshots/recover: {}
  /collections/{collection_name}/snapshots/upload: {}
  /collections/{collection_name}/snapshots/{snapshot_name}:
    get:
      description: Downloads the specified snapshot file from a collection.
      summary: Download a snapshot (collection)
      tags:
      - Snapshots
  /healthz: {}
  /issues: {}
  /livez: {}
  /locks:
    get:
      description: Retrieves the current lock setting. If write is false, all write
        operations and collection creation are restricted.
      summary: Check write protection
      tags:
      - Service
    post:
      description: Restricts all write operations and forbids collection creation.
        This endpoint also returns previous lock options.
      summary: Set write protection
      tags:
      - Service
  /metrics: {}
  /readyz: {}
  /snapshots:
    get:
      description: Returns a list of all snapshots for the entire storage.
      summary: List all snapshots (storage)
      tags:
      - Snapshots
      x-fern-examples:
      - code-samples:
        - code: 'using Qdrant.Client;


            var client = new QdrantClient("localhost", 6334);


            await client.ListFullSnapshotsAsync();

            '
          language: csharp
      - code-samples:
        - code: 'from qdrant_client import QdrantClient


            client = QdrantClient(url="http://localhost:6333")


            client.list_full_snapshots()

            '
          language: python
      - code-samples:
        - code: "import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.listFullSnapshotAsync().get();\n"
          language: java
      - code-samples:
        - code: 'use qdrant_client::Qdrant;


            let client = Qdrant::from_url("http://localhost:6334").build()?;


            client.list_full_snapshots().await?;

            '
          language: rust
      - code-samples:
        - code: 'import { QdrantClient } from "@qdrant/js-client-rest";


            const client = new QdrantClient({ host: "localhost", port: 6333 });


            client.listFullSnapshots();

            '
          language: typescript
    post:
      description: Creates a new snapshot of the entire storage.
      summary: Create a snapshot (storage)
      tags:
      - Snapshots
      x-fern-examples:
      - code-samples:
        - code: 'using Qdrant.Client;


            var client = new QdrantClient("localhost", 6334);


            await client.CreateFullSnapshotAsync();

            '
          language: csharp
      - code-samples:
        - code: 'from qdrant_client import QdrantClient


            client = QdrantClient(url="http://localhost:6333")


            client.create_full_snapshot()

            '
          language: python
      - code-samples:
        - code: "import io.qdrant.client.QdrantClient;\nimport io.qdrant.client.QdrantGrpcClient;\n\
            \nQdrantClient client = new QdrantClient(\n                QdrantGrpcClient.newBuilder(\"\
            localhost\", 6334, false).build());\n\nclient.createFullSnapshotAsync().get();\n"
          language: java
      - code-samples:
        - code: 'use qdrant_client::Qdrant;


            let client = Qdrant::from_url("http://localhost:6334").build()?;


            client.create_full_snapshot().await?;

            '
          language: rust
      - code-samples:
        - code: 'import { QdrantClient } from "@qdrant/js-client-rest";


            const client = new QdrantClient({ host: "localhost", port: 6333 });


            client.createFullSnapshot();

            '
          language: typescript
  /snapshots/{snapshot_name}:
    get:
      description: Downloads the specified snapshot of the entire storage as a file.
      summary: Download a snapshot (storage)
      tags:
      - Snapshots
  /telemetry:
    get:
      description: 'Collects telemetry data, such as: application info, system info,
        collection info, cluster info, configs and statistics.'
      summary: Collect telemetry data
      tags:
      - Service
