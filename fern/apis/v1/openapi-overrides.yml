components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
paths:
  /collections/{collection_name}/shards:
    put:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.create_shard_key("{collection_name}", "{shard_key}")
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({
                    host: "localhost",
                    port: 6333
                });

                client.createShardKey("{collection_name}", {
                    shard_key: "{shard_key}"
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::shard_key::Key};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .create_shard_key(
            #             "{collection_name}",
            #             &Key::Keyword("{shard_key".to_string()),
            #             None,
            #             None,
            #             &[],
            #         )
            #         .await?;

  /collections/{collection_name}/shards/delete:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_shard_key("{collection_name}", "{shard_key}")
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({
                    host: "localhost",
                    port: 6333
                });

                client.deleteShardKey("{collection_name}", {
                    shard_key: "{shard_key}"
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::shard_key::Key};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .delete_shard_key("{collection_name}", &Key::Keyword("{shard_key".to_string()))
            #         .await?;

  /collections:
    get:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.get_collections()
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.getCollections();
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client.list_collections().await?;

  /collections/{collection_name}:
    get:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.get_collection("{collection_name}")
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.getCollection("{collection_name}");
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client.collection_info("{collection_name}").await?;
    put:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.create_collection(
                    collection_name="{collection_name}",
                    vectors_config=models.VectorParams(size=100, distance=models.Distance.COSINE),
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.createCollection("{collection_name}", {
                  vectors: { size: 100, distance: "Cosine" },
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{
            #         client::QdrantClient,
            #         qdrant::{vectors_config::Config, CreateCollection, Distance, VectorParams, VectorsConfig},
            #     };

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .create_collection(&CreateCollection {
            #             collection_name: "{collection_name}".to_string(),
            #             vectors_config: Some(VectorsConfig {
            #                 config: Some(Config::Params(VectorParams {
            #                     size: 100,
            #                     distance: Distance::Cosine.into(),
            #                     ..Default::default()
            #                 })),
            #             }),
            #             ..Default::default()
            #         })
            #         .await?;
    patch:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.update_collection(
                    collection_name="{collection_name}",
                    optimizer_config=models.OptimizersConfigDiff(indexing_threshold=10000),
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.updateCollection("{collection_name}", {
                  optimizers_config: {
                    indexing_threshold: 10000,
                  },
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::OptimizersConfigDiff};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .update_collection(
            #             "{collection_name}",
            #             Some(&OptimizersConfigDiff {
            #                 indexing_threshold: Some(10000),
            #                 ..Default::default()
            #             }),
            #             None,
            #             None,
            #             None,
            #             None,
            #             None,
            #         )
            #         .await?;
    delete:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_collection(collection_name="{collection_name}")
            - sdk: typescript
              code: |
                import { QdrantClient } from '@qdrant/qdrant-js';

                const client = new QdrantClient({url: 'http://127.0.0.1:6333'});

                client.deleteCollection("{collection_name}");
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client.delete_collection("{collection_name}").await?;

  /collections/aliases:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.update_collection_aliases(
                    change_aliases_operations=[
                        models.CreateAliasOperation(
                            create_alias=models.CreateAlias(
                                collection_name="example_collection", alias_name="production_collection"
                            )
                        )
                    ]
                )

                client.update_collection_aliases(
                    change_aliases_operations=[
                        models.DeleteAliasOperation(
                            delete_alias=models.DeleteAlias(alias_name="production_collection")
                        ),
                    ]
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.updateCollectionAliases({
                  actions: [
                    {
                      create_alias: {
                        collection_name: "example_collection",
                        alias_name: "production_collection",
                      },
                    },
                  ],
                });

                client.updateCollectionAliases({
                  actions: [
                    {
                      delete_alias: {
                        alias_name: "production_collection",
                      },
                    },
                  ],
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client.create_alias("example_collection", "production_collection").await?;

            #     client.delete_alias("production_collection").await?;

  /collections/{collection_name}/index:
    put:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.create_payload_index(
                    collection_name="{collection_name}",
                    field_name="name_of_the_field_to_index",
                    field_schema="keyword",
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.createPayloadIndex("{collection_name}", {
                  field_name: "{field_name}",
                  field_schema: "keyword",
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::FieldType};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #     .create_field_index(
            #         "{collection_name}",
            #         "{field_name}",
            #         FieldType::Keyword,
            #         None,
            #         None,
            #     )
            #     .await?;

  /collections/{collection_name}/index/{field_name}:
    delete:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_payload_index("{collection_name}", "{field_name}");
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.deletePayloadIndex("{collection_name}", "{field_name}");
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .delete_field_index("{collection_name}", "{field_name}", None)
            #         .await?;

  /collections/{collection_name}/aliases:
    get:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.get_collection_aliases("{collection_name}")
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.getCollectionAliases("{collection_name}");
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client.list_collection_aliases("{collection_name}").await?;

  /aliases:
    get:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.get_aliases()
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.getAliases();
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client.list_aliases().await?;

  /collections/{collection_name}/snapshots/recover:
    put:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.recover_snapshot(
                    "{collection_name}",
                    "http://example.com/path/to/snapshot.shapshot",
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.recoverSnapshot("{collection_name}", {
                  location: "http://example.com/path/to/snapshot.shapshot",
                });

  /collections/{collection_name}/snapshots:
    get:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.list_snapshots(collection_name="{collection_name}")
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.listSnapshots("{collection_name}");
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client.list_snapshots("{collection_name}").await?;

    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.create_snapshot(collection_name="{collection_name}")
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.createSnapshot("{collection_name}");
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client.create_snapshot("{collection_name}").await?;

  /collections/{collection_name}/snapshots/{snapshot_name}:
    delete:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_snapshot(
                    collection_name="{collection_name}", snapshot_name="{snapshot_name}"
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.deleteSnapshot("{collection_name}", "{snapshot_name}");
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .delete_snapshot("{collection_name}", "{snapshot_name}")
            #         .await?;

  /snapshots:
    get:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.list_full_snapshots()
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.listFullSnapshots();
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client.list_full_snapshots().await?;

    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.create_full_snapshot()
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.createFullSnapshot();
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client.create_full_snapshot().await?;

  /snapshots/{snapshot_name}:
    delete:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_full_snapshot(snapshot_name="{snapshot_name}")
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.deleteFullSnapshot("{snapshot_name}");
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client.delete_full_snapshot("{snapshot_name}").await?;

  /collections/{collection_name}/points/{id}:
    get:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.retrieve(
                    collection_name="{collection_name}",
                    ids=[1],
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.retrieve("{collection_name}", {
                  ids: [1],
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .get_points(
            #             "{collection_name}",
            #             None,
            #             &[1.into()],
            #             Some(false),
            #             Some(false),
            #             None,
            #         )
            #         .await?;

  /collections/{collection_name}/points:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.retrieve(
                    collection_name="{collection_name}",
                    ids=[0, 3, 100],
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.retrieve("{collection_name}", {
                  ids: [0, 3, 100],
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::client::QdrantClient;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .get_points(
            #             "{collection_name}",
            #             None,
            #             &[0.into(), 30.into(), 100.into()],
            #             Some(false),
            #             Some(false),
            #             None,
            #         )
            #         .await?;

    put:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.upsert(
                    collection_name="{collection_name}",
                    points=[
                        models.PointStruct(
                            id=1,
                            payload={
                                "color": "red",
                            },
                            vector=[0.9, 0.1, 0.1],
                        ),
                        models.PointStruct(
                            id=2,
                            payload={
                                "color": "green",
                            },
                            vector=[0.1, 0.9, 0.1],
                        ),
                        models.PointStruct(
                            id=3,
                            payload={
                                "color": "blue",
                            },
                            vector=[0.1, 0.1, 0.9],
                        ),
                    ],
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.upsert("{collection_name}", {
                  points: [
                    {
                      id: 1,
                      payload: { color: "red" },
                      vector: [0.9, 0.1, 0.1],
                    },
                    {
                      id: 2,
                      payload: { color: "green" },
                      vector: [0.1, 0.9, 0.1],
                    },
                    {
                      id: 3,
                      payload: { color: "blue" },
                      vector: [0.1, 0.1, 0.9],
                    },
                  ],
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::PointStruct};
            #     use serde_json::json;

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .upsert_points_batch_blocking(
            #             "{collection_name}".to_string(),
            #             None,
            #             vec![
            #                 PointStruct::new(
            #                     1,
            #                     vec![0.9, 0.1, 0.1],
            #                     json!(
            #                         {"color": "red"}
            #                     )
            #                     .try_into()
            #                     .unwrap(),
            #                 ),
            #                 PointStruct::new(
            #                     2,
            #                     vec![0.1, 0.9, 0.1],
            #                     json!(
            #                         {"color": "green"}
            #                     )
            #                     .try_into()
            #                     .unwrap(),
            #                 ),
            #                 PointStruct::new(
            #                     3,
            #                     vec![0.1, 0.1, 0.9],
            #                     json!(
            #                         {"color": "blue"}
            #                     )
            #                     .try_into()
            #                     .unwrap(),
            #                 ),
            #             ],
            #             None,
            #             100,
            #         )
            #         .await?;

  /collections/{collection_name}/points/delete:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete(
                    collection_name="{collection_name}",
                    points_selector=models.PointIdsList(
                        points=[0, 3, 100],
                    ),
                )

                client.delete(
                    collection_name="{collection_name}",
                    points_selector=models.FilterSelector(
                        filter=models.Filter(
                            must=[
                                models.FieldCondition(
                                    key="color",
                                    match=models.MatchValue(value="red"),
                                ),
                            ],
                        )
                    ),
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.delete("{collection_name}", {
                  points: [0, 3, 100],
                });

                client.delete("{collection_name}", {
                    filter: {
                        must: [
                            {
                                key: "color",
                                match: {
                                    value: "red",
                                },
                            },
                        ],
                    },
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::{points_selector::PointsSelectorOneOf, Condition, Filter, PointsIdsList, PointsSelector}};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .delete_points_blocking(
            #             "{collection_name}",
            #             None,
            #             &PointsSelector {
            #                 points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
            #                     ids: vec![0.into(), 3.into(), 100.into()],
            #                 })),
            #             },
            #             None,
            #         )
            #         .await?;

            #         client
            #             .delete_points_blocking(
            #                 "{collection_name}",
            #                 None,
            #                 &PointsSelector {
            #                     points_selector_one_of: Some(PointsSelectorOneOf::Filter(Filter::must([
            #                         Condition::matches("color", "red".to_string()),
            #                     ]))),
            #                 },
            #                 None,
            #             )
            #             .await?;

  /collections/{collection_name}/points/vectors:
    put:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.update_vectors(
                    collection_name="{collection_name}",
                    points=[
                        models.PointVectors(
                            id=1,
                            vector={
                                "image": [0.1, 0.2, 0.3, 0.4],
                            },
                        ),
                        models.PointVectors(
                            id=2,
                            vector={
                                "text": [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
                            },
                        ),
                    ],
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.updateVectors("{collection_name}", {
                    points: [
                        {
                            id: 1,
                            vector: {
                                image: [0.1, 0.2, 0.3, 0.4],
                            },
                        },
                        {
                            id: 2,
                            vector: {
                                text: [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
                            },
                        },
                    ],
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::qdrant::PointVectors;
            #     use std::collections::HashMap;

            #     client
            #         .update_vectors_blocking(
            #             "{collection_name}",
            #             None,
            #             &[
            #                 PointVectors {
            #                     id: Some(1.into()),
            #                     vectors: Some(
            #                         HashMap::from([("image".to_string(), vec![0.1, 0.2, 0.3, 0.4])]).into(),
            #                     ),
            #                 },
            #                 PointVectors {
            #                     id: Some(2.into()),
            #                     vectors: Some(
            #                         HashMap::from([(
            #                             "text".to_string(),
            #                             vec![0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
            #                         )])
            #                         .into(),
            #                     ),
            #                 },
            #             ],
            #             None,
            #         )
            #         .await?;

  /collections/{collection_name}/points/vectors/delete:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_vectors(
                    collection_name="{collection_name}",
                    points=[0, 3, 100],
                    vectors=["text", "image"],
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.deleteVectors("{collection_name}", {
                  points: [0, 3, 10],
                  vectors: ["text", "image"],
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::{
            #         points_selector::PointsSelectorOneOf, PointsIdsList, PointsSelector, VectorsSelector,
            #     }};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .delete_vectors_blocking(
            #             "{collection_name}",
            #             None,
            #             &PointsSelector {
            #                 points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
            #                     ids: vec![0.into(), 3.into(), 10.into()],
            #                 })),
            #             },
            #             &VectorsSelector {
            #                 names: vec!["text".into(), "image".into()],
            #             },
            #             None,
            #         )
            #         .await?;

  /collections/{collection_name}/points/payload:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.set_payload(
                    collection_name="{collection_name}",
                    payload={
                        "property1": "string",
                        "property2": "string",
                    },
                    points=[0, 3, 10],
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.setPayload("{collection_name}", {
                  payload: {
                    property1: "string",
                    property2: "string",
                  },
                  points: [0, 3, 10],
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::{
            #         points_selector::PointsSelectorOneOf, PointsIdsList, PointsSelector,
            #     }};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .set_payload_blocking(
            #             "{collection_name}",
            #             None,
            #             &PointsSelector {
            #                 points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
            #                     ids: vec![0.into(), 3.into(), 10.into()],
            #                 })),
            #             },
            #             json!({
            #                 "property1": "string",
            #                 "property2": "string",
            #             })
            #             .try_into()
            #             .unwrap(),
            #             None,
            #         )
            #         .await?;

    put:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.overwrite_payload(
                    collection_name="{collection_name}",
                    payload={
                        "property1": "string",
                        "property2": "string",
                    },
                    points=[0, 3, 10],
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.overwritePayload("{collection_name}", {
                  payload: {
                    property1: "string",
                    property2: "string",
                  },
                  points: [0, 3, 10],
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::{
            #         points_selector::PointsSelectorOneOf, PointsIdsList, PointsSelector,
            #     }};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .overwrite_payload_blocking(
            #             "{collection_name}",
            #             None,
            #             &PointsSelector {
            #                 points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
            #                     ids: vec![0.into(), 3.into(), 10.into()],
            #                 })),
            #             },
            #             json!({
            #                 "property1": "string",
            #                 "property2": "string",
            #             })
            #             .try_into()
            #             .unwrap(),
            #             None,
            #         )
            #         .await?;

  /collections/{collection_name}/points/payload/delete:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_payload(
                    collection_name="{collection_name}",
                    keys=["color", "price"],
                    points=[0, 3, 100],
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.deletePayload("{collection_name}", {
                  keys: ["color", "price"],
                  points: [0, 3, 100],
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::{
            #         points_selector::PointsSelectorOneOf, PointsIdsList, PointsSelector,
            #     }};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .delete_payload_blocking(
            #             "{collection_name}",
            #             None,
            #             &PointsSelector {
            #                 points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
            #                     ids: vec![0.into(), 3.into(), 100.into()],
            #                 })),
            #             },
            #             vec!["color".to_string(), "price".to_string()],
            #             None,
            #         )
            #         .await?;

  /collections/{collection_name}/points/payload/clear:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.clear_payload(
                    collection_name="{collection_name}",
                    points_selector=[0, 3, 100],
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.clearPayload("{collection_name}", {
                  points: [0, 3, 100],
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::{
            #         points_selector::PointsSelectorOneOf, PointsIdsList, PointsSelector,
            #     }};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .clear_payload(
            #             "{collection_name}",
            #             None,
            #             Some(PointsSelector {
            #                 points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
            #                     ids: vec![0.into(), 3.into(), 100.into()],
            #                 })),
            #             }),
            #             None,
            #         )
            #         .await?;

  /collections/{collection_name}/points/batch:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.batch_update_points(
                    collection_name="{collection_name}",
                    update_operations=[
                        models.UpsertOperation(
                            upsert=models.PointsList(
                                points=[
                                    models.PointStruct(
                                        id=1,
                                        vector=[1.0, 2.0, 3.0, 4.0],
                                        payload={},
                                    ),
                                ]
                            )
                        ),
                        models.UpdateVectorsOperation(
                            update_vectors=models.UpdateVectors(
                                points=[
                                    models.PointVectors(
                                        id=1,
                                        vector=[1.0, 2.0, 3.0, 4.0],
                                    )
                                ]
                            )
                        ),
                        models.SetPayloadOperation(
                            set_payload=models.SetPayload(
                                payload={
                                    "test_payload_2": 2,
                                    "test_payload_3": 3,
                                },
                                points=[1],
                            )
                        ),
                    ],
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.batchUpdate("{collection_name}", {
                    operations: [
                        {
                            upsert: {
                                points: [
                                    {
                                        id: 1,
                                        vector: [1.0, 2.0, 3.0, 4.0],
                                        payload: {},
                                    },
                                ],
                            },
                        },
                        {
                            update_vectors: {
                                points: [
                                    {
                                        id: 1,
                                        vector: [1.0, 2.0, 3.0, 4.0],
                                    },
                                ],
                            },
                        },
                        {
                            set_payload: {
                                payload: {
                                    test_payload_2: 2,
                                    test_payload_3: 3,
                                },
                                points: [1],
                            },
                        },
                    ],
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::qdrant::{
            #         points_selector::PointsSelectorOneOf,
            #         points_update_operation::{
            #             Operation, PointStructList, SetPayload, UpdateVectors,
            #         },
            #         PointStruct, PointVectors, PointsIdsList, PointsSelector, PointsUpdateOperation,
            #     };

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .batch_updates_blocking(
            #             "{collection_name}",
            #             &[
            #                 PointsUpdateOperation {
            #                     operation: Some(Operation::Upsert(PointStructList {
            #                         points: vec![PointStruct::new(
            #                             1,
            #                             vec![1.0, 2.0, 3.0, 4.0],
            #                             json!({}).try_into().unwrap(),
            #                         )],
            #                         ..Default::default()
            #                     })),
            #                 },
            #                 PointsUpdateOperation {
            #                     operation: Some(Operation::UpdateVectors(UpdateVectors {
            #                         points: vec![PointVectors {
            #                             id: Some(1.into()),
            #                             vectors: Some(vec![1.0, 2.0, 3.0, 4.0].into()),
            #                         }],
            #                         ..Default::default()
            #                     })),
            #                 },
            #                 PointsUpdateOperation {
            #                     operation: Some(Operation::OverwritePayload(SetPayload {
            #                         points_selector: Some(PointsSelector {
            #                             points_selector_one_of: Some(PointsSelectorOneOf::Points(
            #                                 PointsIdsList {
            #                                     ids: vec![1.into()],
            #                                 },
            #                             )),
            #                         }),
            #                         payload: HashMap::from([("test_payload".to_string(), 1.into())]),
            #                         ..Default::default()
            #                     })),
            #                 },
            #             ],
            #             None,
            #         )
            #         .await?;

  /collections/{collection_name}/points/scroll:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.scroll(
                    collection_name="{collection_name}",
                    scroll_filter=models.Filter(
                        must=[
                            models.FieldCondition(key="color", match=models.MatchValue(value="red")),
                        ]
                    ),
                    limit=1,
                    with_payload=True,
                    with_vectors=False,
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.scroll("{collection_name}", {
                    filter: {
                        must: [
                            {
                                key: "color",
                                match: {
                                    value: "red",
                                },
                            },
                        ],
                    },
                    limit: 1,
                    with_payload: true,
                    with_vector: false,
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::{Condition, Filter, ScrollPoints}};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .scroll(&ScrollPoints {
            #             collection_name: "{collection_name}".to_string(),
            #             filter: Some(Filter::must([Condition::matches(
            #                 "color",
            #                 "red".to_string(),
            #             )])),
            #             limit: Some(1),
            #             with_payload: Some(true.into()),
            #             with_vectors: Some(false.into()),
            #             ..Default::default()
            #         })
            #         .await?;

  /collections/{collection_name}/points/search:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.search(
                    collection_name="{collection_name}",
                    query_filter=models.Filter(
                        must=[
                            models.FieldCondition(
                                key="city",
                                match=models.MatchValue(
                                    value="London",
                                ),
                            )
                        ]
                    ),
                    query_vector=[0.2, 0.1, 0.9, 0.7],
                    limit=3,
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.search("{collection_name}", {
                    filter: {
                        must: [
                            {
                                key: "city",
                                match: {
                                    value: "London",
                                },
                            },
                        ],
                    },
                    vector: [0.2, 0.1, 0.9, 0.7],
                    limit: 3,
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{
            #         client::QdrantClient,
            #         qdrant::{Condition, Filter, SearchParams, SearchPoints},
            #     };

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .search_points(&SearchPoints {
            #             collection_name: "{collection_name}".to_string(),
            #             filter: Some(Filter::must([Condition::matches(
            #                 "city",
            #                 "London".to_string(),
            #             )])),
            #             params: Some(SearchParams {
            #                 hnsw_ef: Some(128),
            #                 exact: Some(false),
            #                 ..Default::default()
            #             }),
            #             vector: vec![0.2, 0.1, 0.9, 0.7],
            #             limit: 3,
            #             ..Default::default()
            #         })
            #         .await?;

  /collections/{collection_name}/points/search/batch:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                filter_ = models.Filter(
                    must=[
                        models.FieldCondition(
                            key="city",
                            match=models.MatchValue(
                                value="London",
                            ),
                        )
                    ]
                )

                search_queries = [
                    models.SearchRequest(vector=[0.2, 0.1, 0.9, 0.7], filter=filter_, limit=3),
                    models.SearchRequest(vector=[0.5, 0.3, 0.2, 0.3], filter=filter_, limit=3),
                ]

                client.search_batch(collection_name="{collection_name}", requests=search_queries)
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                const filter = {
                    must: [
                        {
                            key: "city",
                            match: {
                                value: "London",
                            },
                        },
                    ],
                };

                const searches = [
                    {
                        vector: [0.2, 0.1, 0.9, 0.7],
                        filter,
                        limit: 3,
                    },
                    {
                        vector: [0.5, 0.3, 0.2, 0.3],
                        filter,
                        limit: 3,
                    },
                ];

                client.searchBatch("{collection_name}", {
                    searches,
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{
            #         client::QdrantClient,
            #         qdrant::{Condition, Filter, SearchBatchPoints, SearchPoints},
            #     };

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     let filter = Filter::must([Condition::matches("city", "London".to_string())]);

            #     let searches = vec![
            #         SearchPoints {
            #             collection_name: "{collection_name}".to_string(),
            #             vector: vec![0.2, 0.1, 0.9, 0.7],
            #             filter: Some(filter.clone()),
            #             limit: 3,
            #             ..Default::default()
            #         },
            #         SearchPoints {
            #             collection_name: "{collection_name}".to_string(),
            #             vector: vec![0.5, 0.3, 0.2, 0.3],
            #             filter: Some(filter),
            #             limit: 3,
            #             ..Default::default()
            #         },
            #     ];

            #     client
            #         .search_batch_points(&SearchBatchPoints {
            #             collection_name: "{collection_name}".to_string(),
            #             search_points: searches,
            #             read_consistency: None,
            #             ..Default::default()
            #         })
            #         .await?;

  /collections/{collection_name}/points/search/groups:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.search_groups(
                    collection_name="{collection_name}",
                    query_vector=[1.1],
                    group_by="document_id",
                    limit=4,
                    group_size=2,
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.searchPointGroups("{collection_name}", {
                    vector: [1.1],
                    group_by: "document_id",
                    limit: 4,
                    group_size: 2,
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{
            #         client::QdrantClient,
            #         qdrant::SearchPointGroups,
            #     };

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .search_groups(&SearchPointGroups {
            #             collection_name: "{collection_name}".to_string(),
            #             vector: vec![1.1],
            #             group_by: "document_id".to_string(),
            #             limit: 4,
            #             group_size: 2,
            #             ..Default::default()
            #         })
            #         .await?;

  /collections/{collection_name}/points/recommend:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.recommend(
                    collection_name="{collection_name}",
                    positive=[100, 231],
                    negative=[718, [0.2, 0.3, 0.4, 0.5]],
                    strategy=models.RecommendStrategy.AVERAGE_VECTOR,
                    query_filter=models.Filter(
                        must=[
                            models.FieldCondition(
                                key="city",
                                match=models.MatchValue(
                                    value="London",
                                ),
                            )
                        ]
                    ),
                    limit=3,
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.recommend("{collection_name}", {
                    positive: [100, 231],
                    negative: [718, [0.2, 0.3, 0.4, 0.5]],
                    strategy: "average_vector",
                    filter: {
                        must: [
                            {
                                key: "city",
                                match: {
                                    value: "London",
                                },
                            },
                        ],
                    },
                    limit: 3,
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{
            #         client::QdrantClient,
            #         qdrant::{Condition, Filter, RecommendPoints, RecommendStrategy},
            #     };

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .recommend(&RecommendPoints {
            #             collection_name: "{collection_name}".to_string(),
            #             positive: vec![100.into(), 200.into()],
            #             positive_vectors: vec![vec![100.0, 231.0].into()],
            #             negative: vec![718.into()],
            #             negative_vectors: vec![vec![0.2, 0.3, 0.4, 0.5].into()],
            #             strategy: Some(RecommendStrategy::AverageVector.into()),
            #             filter: Some(Filter::must([Condition::matches(
            #                 "city",
            #                 "London".to_string(),
            #             )])),
            #             limit: 3,
            #             ..Default::default()
            #         })
            #         .await?;

  /collections/{collection_name}/points/recommend/batch:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                recommend_queries = [
                    models.RecommendRequest(
                        positive=[100, 231], negative=[718], filter=filter_, limit=3
                    ),
                    models.RecommendRequest(positive=[200, 67], negative=[300], limit=3),
                ]

                client.recommend_batch(collection_name="{collection_name}", requests=recommend_queries)
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                const searches = [
                    {
                        positive: [100, 231],
                        negative: [718],
                        limit: 3,
                    },
                    {
                        positive: [200, 67],
                        negative: [300],
                        limit: 3,
                    },
                ];

                client.recommend_batch("{collection_name}", {
                    searches,
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{
            #         client::QdrantClient,
            #         qdrant::{Condition, Filter, RecommendBatchPoints, RecommendPoints},
            #     };

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     let filter = Filter::must([Condition::matches("city", "London".to_string())]);

            #     let recommend_queries = vec![
            #         RecommendPoints {
            #             collection_name: "{collection_name}".to_string(),
            #             positive: vec![100.into(), 231.into()],
            #             negative: vec![718.into()],
            #             filter: Some(filter.clone()),
            #             limit: 3,
            #             ..Default::default()
            #         },
            #         RecommendPoints {
            #             collection_name: "{collection_name}".to_string(),
            #             positive: vec![200.into(), 67.into()],
            #             negative: vec![300.into()],
            #             filter: Some(filter),
            #             limit: 3,
            #             ..Default::default()
            #         },
            #     ];

            #     client
            #         .recommend_batch(&RecommendBatchPoints {
            #             collection_name: "{collection_name}".to_string(),
            #             recommend_points: recommend_queries,
            #             ..Default::default()
            #         })
            #         .await?;

  /collections/{collection_name}/points/recommend/groups:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.recommend_groups(
                    collection_name="{collection_name}",
                    positive=[100, 231],
                    negative=[718],
                    group_by="document_id",
                    limit=3,
                    group_size=2,
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.recommendPointGroups("{collection_name}", {
                    positive: [100, 231],
                    negative: [718],
                    group_by: "document_id",
                    limit: 3,
                    group_size: 2,
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{
            #         client::QdrantClient,
            #         qdrant::{RecommendPointGroups, RecommendStrategy},
            #     };

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .recommend_groups(&RecommendPointGroups {
            #             collection_name: "{collection_name}".to_string(),
            #             group_by: "document_id".to_string(),
            #             group_size: 2,
            #             positive: vec![100.into(), 200.into()],
            #             negative: vec![718.into()],
            #             strategy: Some(RecommendStrategy::AverageVector.into()),
            #             limit: 3,
            #             ..Default::default()
            #         })
            #         .await?;

  /collections/{collection_name}/points/discover:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.discover(
                    "{collection_name}",
                    target=[0.2, 0.1, 0.9, 0.7],
                    context=[
                        models.ContextExamplePair(positive=100, negative=718),
                        models.ContextExamplePair(positive=200, negative=300),
                    ],
                    limit=10,
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.discover("{collection_name}", {
                    target: [0.2, 0.1, 0.9, 0.7],
                    context: [
                        {
                            positive: 100,
                            negative: 718,
                        },
                        {
                            positive: 200,
                            negative: 300,
                        },
                    ],
                    limit: 10,
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{
            #         client::QdrantClient,
            #         qdrant::{
            #             target_vector::Target, vector_example::Example, ContextExamplePair, DiscoverPoints,
            #             TargetVector, VectorExample,
            #         },
            #     };

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .discover(&DiscoverPoints {
            #             collection_name: "{collection_name}".to_string(),
            #             target: Some(TargetVector {
            #                 target: Some(Target::Single(VectorExample {
            #                     example: Some(Example::Vector(vec![0.2, 0.1, 0.9, 0.7].into())),
            #                 })),
            #             }),
            #             context: vec![
            #                 ContextExamplePair {
            #                     positive: Some(VectorExample {
            #                         example: Some(Example::Id(100.into())),
            #                     }),
            #                     negative: Some(VectorExample {
            #                         example: Some(Example::Id(718.into())),
            #                     }),
            #                 },
            #                 ContextExamplePair {
            #                     positive: Some(VectorExample {
            #                         example: Some(Example::Id(200.into())),
            #                     }),
            #                     negative: Some(VectorExample {
            #                         example: Some(Example::Id(300.into())),
            #                     }),
            #                 },
            #             ],
            #             limit: 10,
            #             ..Default::default()
            #         })
            #         .await?;

  /collections/{collection_name}/points/discover/batch:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                discover_queries = [
                    models.DiscoverRequest(
                        target=[0.2, 0.1, 0.9, 0.7],
                        context=[
                            models.ContextExamplePair(
                                positive=100,
                                negative=718,
                            ),
                            models.ContextExamplePair(
                                positive=200,
                                negative=300,
                            ),
                        ],
                        limit=10,
                    ),
                    models.DiscoverRequest(
                        target=[0.5, 0.3, 0.2, 0.3],
                        context=[
                            models.ContextExamplePair(
                                positive=342,
                                negative=213,
                            ),
                            models.ContextExamplePair(
                                positive=100,
                                negative=200,
                            ),
                        ],
                        limit=5,
                    ),
                ]

                client.discover_batch("{collection_name}", discover_queries)
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                const searches = [
                    {
                        target: [0.2, 0.1, 0.9, 0.7],
                        context: [
                            {
                                positive: 100,
                                negative: 718,
                            },
                            {
                                positive: 200,
                                negative: 300,
                            },
                        ],
                        limit: 10,
                    },
                    {
                        target: [0.5, 0.3, 0.2, 0.3],
                        context: [
                            {
                                positive: 342,
                                negative: 213,
                            },
                            {
                                positive: 100,
                                negative: 200,
                            },
                        ],
                        limit: 5,
                    },
                ];

                client.discoverBatchPoints("{collection_name}", {
                    searches,
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{
            #         client::QdrantClient,
            #         qdrant::{
            #             target_vector::Target, vector_example::Example, ContextExamplePair, DiscoverBatchPoints,
            #             DiscoverPoints, TargetVector, VectorExample,
            #         },
            #     };

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     let discover_points = &DiscoverBatchPoints {
            #         collection_name: "{collection_name}".to_string(),
            #         discover_points: vec![
            #             DiscoverPoints {
            #                 collection_name: "{collection_name}".to_string(),
            #                 target: Some(TargetVector {
            #                     target: Some(Target::Single(VectorExample {
            #                         example: Some(Example::Vector(vec![0.2, 0.1, 0.9, 0.7].into())),
            #                     })),
            #                 }),
            #                 context: vec![
            #                     ContextExamplePair {
            #                         positive: Some(VectorExample {
            #                             example: Some(Example::Id(100.into())),
            #                         }),
            #                         negative: Some(VectorExample {
            #                             example: Some(Example::Id(718.into())),
            #                         }),
            #                     },
            #                     ContextExamplePair {
            #                         positive: Some(VectorExample {
            #                             example: Some(Example::Id(200.into())),
            #                         }),
            #                         negative: Some(VectorExample {
            #                             example: Some(Example::Id(300.into())),
            #                         }),
            #                     },
            #                 ],
            #                 limit: 10,
            #                 ..Default::default()
            #             },
            #             DiscoverPoints {
            #                 collection_name: "{collection_name}".to_string(),
            #                 target: Some(TargetVector {
            #                     target: Some(Target::Single(VectorExample {
            #                         example: Some(Example::Vector(vec![0.5, 0.3, 0.2, 0.3].into())),
            #                     })),
            #                 }),
            #                 context: vec![
            #                     ContextExamplePair {
            #                         positive: Some(VectorExample {
            #                             example: Some(Example::Id(342.into())),
            #                         }),
            #                         negative: Some(VectorExample {
            #                             example: Some(Example::Id(213.into())),
            #                         }),
            #                     },
            #                     ContextExamplePair {
            #                         positive: Some(VectorExample {
            #                             example: Some(Example::Id(100.into())),
            #                         }),
            #                         negative: Some(VectorExample {
            #                             example: Some(Example::Id(200.into())),
            #                         }),
            #                     },
            #                 ],
            #                 limit: 10,
            #                 ..Default::default()
            #             },
            #         ],
            #         ..Default::default()
            #     };

            #     client.discover_batch(discover_points).await?;

  /collections/{collection_name}/points/count:
    post:
      x-fern-examples:
        - code-samples:
            - sdk: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.count(
                    collection_name="{collection_name}",
                    count_filter=models.Filter(
                        must=[
                            models.FieldCondition(key="color", match=models.MatchValue(value="red")),
                        ]
                    ),
                    exact=True,
                )
            - sdk: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.count("{collection_name}", {
                    filter: {
                        must: [
                            {
                                key: "color",
                                match: {
                                    value: "red",
                                },
                            },
                        ],
                    },
                    exact: true,
                });
            # - sdk: rust
            #   code: |
            #     use qdrant_client::{client::QdrantClient, qdrant::{Condition, CountPoints, Filter}};

            #     let client = QdrantClient::from_url("http://localhost:6334").build()?;

            #     client
            #         .count(&CountPoints {
            #             collection_name: "{collection_name}".to_string(),
            #             filter: Some(Filter::must([Condition::matches(
            #                 "color",
            #                 "red".to_string(),
            #             )])),
            #             exact: Some(true),
            #             ..Default::default()
            #         })
            #         .await?;
