components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
paths:
  /collections/{collection_name}/shards:
    put:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.create_shard_key("{collection_name}", "{shard_key}")
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({
                    host: "localhost",
                    port: 6333
                });

                client.createShardKey("{collection_name}", {
                    shard_key: "{shard_key}"
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::shard_key::Key};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .create_shard_key(
                        "{collection_name}",
                        &Key::Keyword("{shard_key".to_string()),
                        None,
                        None,
                        &[],
                    )
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.ShardKeyFactory.shardKey;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Collections.CreateShardKey;
                import io.qdrant.client.grpc.Collections.CreateShardKeyRequest;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.createShardKeyAsync(CreateShardKeyRequest.newBuilder()
                                .setCollectionName("{collection_name}")
                                .setRequest(CreateShardKey.newBuilder()
                                                .setShardKey(shardKey("{shard_key}"))
                                                .build())
                                .build()).get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;

                var client = new QdrantClient("localhost", 6334);

                await client.CreateShardKeyAsync(
                    "{collection_name}",
                    new CreateShardKey { ShardKey = new ShardKey { Keyword = "{shard_key}", } }
                );

  /collections/{collection_name}/shards/delete:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_shard_key("{collection_name}", "{shard_key}")
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({
                    host: "localhost",
                    port: 6333
                });

                client.deleteShardKey("{collection_name}", {
                    shard_key: "{shard_key}"
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::shard_key::Key};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .delete_shard_key("{collection_name}", &Key::Keyword("{shard_key".to_string()))
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.ShardKeyFactory.shardKey;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Collections.DeleteShardKey;
                import io.qdrant.client.grpc.Collections.DeleteShardKeyRequest;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.deleteShardKeyAsync(DeleteShardKeyRequest.newBuilder()
                                .setCollectionName("{collection_name}")
                                .setRequest(DeleteShardKey.newBuilder()
                                                .setShardKey(shardKey("{shard_key}"))
                                                .build())
                                .build()).get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;

                var client = new QdrantClient("localhost", 6334);

                await client.DeleteShardKeyAsync(
                    "{collection_name}",
                    new DeleteShardKey { ShardKey = new ShardKey { Keyword = "shard_key", } }
                );

  /collections:
    get:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.get_collections()
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.getCollections();
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client.list_collections().await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.listCollectionsAsync().get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.ListCollectionsAsync();

  /collections/{collection_name}:
    get:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.get_collection("{collection_name}")
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.getCollection("{collection_name}");
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client.collection_info("{collection_name}").await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.getCollectionInfoAsync("{collection_name}").get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.GetCollectionInfoAsync("{collection_name}");

    put:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.create_collection(
                    collection_name="{collection_name}",
                    vectors_config=models.VectorParams(size=100, distance=models.Distance.COSINE),
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.createCollection("{collection_name}", {
                  vectors: { size: 100, distance: "Cosine" },
                });
            - language: rust
              code: |
                use qdrant_client::{
                    client::QdrantClient,
                    qdrant::{vectors_config::Config, CreateCollection, Distance, VectorParams, VectorsConfig},
                };

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .create_collection(&CreateCollection {
                        collection_name: "{collection_name}".to_string(),
                        vectors_config: Some(VectorsConfig {
                            config: Some(Config::Params(VectorParams {
                                size: 100,
                                distance: Distance::Cosine.into(),
                                ..Default::default()
                            })),
                        }),
                        ..Default::default()
                    })
                    .await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Collections.Distance;
                import io.qdrant.client.grpc.Collections.VectorParams;

                QdrantClient client = new QdrantClient(
                    QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.createCollectionAsync("{collection_name}",
                        VectorParams.newBuilder().setDistance(Distance.Cosine).setSize(100).build()).get();
            - language: csharp
              code: |
    patch:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.update_collection(
                    collection_name="{collection_name}",
                    optimizer_config=models.OptimizersConfigDiff(indexing_threshold=10000),
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.updateCollection("{collection_name}", {
                  optimizers_config: {
                    indexing_threshold: 10000,
                  },
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::OptimizersConfigDiff};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .update_collection(
                        "{collection_name}",
                        Some(&OptimizersConfigDiff {
                            indexing_threshold: Some(10000),
                            ..Default::default()
                        }),
                        None,
                        None,
                        None,
                        None,
                        None,
                    )
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.ShardKeyFactory.shardKey;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Collections.OptimizersConfigDiff;
                import io.qdrant.client.grpc.Collections.UpdateCollection;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.updateCollectionAsync(
                    UpdateCollection.newBuilder()
                        .setCollectionName("{collection_name}")
                        .setOptimizersConfig(
                            OptimizersConfigDiff.newBuilder().setIndexingThreshold(10000).build())
                        .build());
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;

                var client = new QdrantClient("localhost", 6334);

                await client.UpdateCollectionAsync(
                  collectionName: "{collection_name}",
                  optimizersConfig: new OptimizersConfigDiff { IndexingThreshold = 10000 }
                );
    delete:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_collection(collection_name="{collection_name}")
            - language: typescript
              code: |
                import { QdrantClient } from '@qdrant/qdrant-js';

                const client = new QdrantClient({url: 'http://127.0.0.1:6333'});

                client.deleteCollection("{collection_name}");
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client.delete_collection("{collection_name}").await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client =
                    new QdrantClient(QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.deleteCollectionAsync("{collection_name}").get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.DeleteCollectionAsync("{collection_name}");

  /collections/aliases:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.update_collection_aliases(
                    change_aliases_operations=[
                        models.CreateAliasOperation(
                            create_alias=models.CreateAlias(
                                collection_name="example_collection", alias_name="production_collection"
                            )
                        )
                    ]
                )

                client.update_collection_aliases(
                    change_aliases_operations=[
                        models.DeleteAliasOperation(
                            delete_alias=models.DeleteAlias(alias_name="production_collection")
                        ),
                    ]
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.updateCollectionAliases({
                  actions: [
                    {
                      create_alias: {
                        collection_name: "example_collection",
                        alias_name: "production_collection",
                      },
                    },
                  ],
                });

                client.updateCollectionAliases({
                  actions: [
                    {
                      delete_alias: {
                        alias_name: "production_collection",
                      },
                    },
                  ],
                });
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client.create_alias("example_collection", "production_collection").await?;

                client.delete_alias("production_collection").await?;
            - language: java
              code: |
                import static io.qdrant.client.ShardKeyFactory.shardKey;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Collections.DeleteShardKey;
                import io.qdrant.client.grpc.Collections.DeleteShardKeyRequest;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.createAliasAsync("production_collection", "example_collection").get();

                client.deleteAliasAsync("production_collection").get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.CreateAliasAsync(aliasName: "production_collection", collectionName: "example_collection");

                await client.DeleteAliasAsync("production_collection");

  /collections/{collection_name}/index:
    put:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.create_payload_index(
                    collection_name="{collection_name}",
                    field_name="name_of_the_field_to_index",
                    field_schema="keyword",
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.createPayloadIndex("{collection_name}", {
                  field_name: "{field_name}",
                  field_schema: "keyword",
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::FieldType};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                .create_field_index(
                    "{collection_name}",
                    "{field_name}",
                    FieldType::Keyword,
                    None,
                    None,
                )
                .await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Collections.PayloadSchemaType;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.createPayloadIndexAsync(
                                "{collection_name}",
                                "{field_name}",
                                PayloadSchemaType.Keyword,
                                null,
                                true,
                                null,
                                null);
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.CreatePayloadIndexAsync(
                  collectionName: "{collection_name}",
                  fieldName: "name_of_the_field_to_index"
                );

  /collections/{collection_name}/index/{field_name}:
    delete:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_payload_index("{collection_name}", "{field_name}");
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.deletePayloadIndex("{collection_name}", "{field_name}");
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .delete_field_index("{collection_name}", "{field_name}", None)
                    .await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.deletePayloadIndexAsync("{collection_name}", "{field_name}", true, null, null).get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.DeletePayloadIndexAsync(
                  collectionName: "{collection_name}",
                  fieldName: "name_of_the_field_to_index"
                );

  /collections/{collection_name}/aliases:
    get:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.get_collection_aliases("{collection_name}")
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.getCollectionAliases("{collection_name}");
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client.list_collection_aliases("{collection_name}").await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.listCollectionAliasesAsync("{collection_name}").get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.ListCollectionAliasesAsync("{collection_name}");

  /aliases:
    get:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.get_aliases()
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.getAliases();
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client.list_aliases().await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.listAliasesAsync().get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.ListAliasesAsync();

  /collections/{collection_name}/snapshots/recover:
    put:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.recover_snapshot(
                    "{collection_name}",
                    "http://example.com/path/to/snapshot.shapshot",
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.recoverSnapshot("{collection_name}", {
                  location: "http://example.com/path/to/snapshot.shapshot",
                });

  /collections/{collection_name}/snapshots:
    get:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.list_snapshots(collection_name="{collection_name}")
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.listSnapshots("{collection_name}");
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client.list_snapshots("{collection_name}").await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.listSnapshotAsync("{collection_name}").get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.ListSnapshotsAsync("{collection_name}");

    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.create_snapshot(collection_name="{collection_name}")
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.createSnapshot("{collection_name}");
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client.create_snapshot("{collection_name}").await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.createSnapshotAsync("{collection_name}").get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.CreateSnapshotAsync("{collection_name}");

  /collections/{collection_name}/snapshots/{snapshot_name}:
    delete:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_snapshot(
                    collection_name="{collection_name}", snapshot_name="{snapshot_name}"
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.deleteSnapshot("{collection_name}", "{snapshot_name}");
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .delete_snapshot("{collection_name}", "{snapshot_name}")
                    .await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.deleteSnapshotAsync("{collection_name}", "{snapshot_name}").get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.DeleteSnapshotAsync("{collection_name}", "{snapshot_name}");

  /snapshots:
    get:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.list_full_snapshots()
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.listFullSnapshots();
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client.list_full_snapshots().await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.listFullSnapshotAsync().get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.ListFullSnapshotsAsync();

    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.create_full_snapshot()
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.createFullSnapshot();
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client.create_full_snapshot().await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.createFullSnapshotAsync().get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.CreateFullSnapshotAsync();

  /snapshots/{snapshot_name}:
    delete:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_full_snapshot(snapshot_name="{snapshot_name}")
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.deleteFullSnapshot("{snapshot_name}");
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client.delete_full_snapshot("{snapshot_name}").await?;
            - language: java
              code: |
                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.deleteFullSnapshotAsync("{snapshot_name}").get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.DeleteFullSnapshotAsync("{snapshot_name}");

  /collections/{collection_name}/points:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.retrieve(
                    collection_name="{collection_name}",
                    ids=[0, 3, 100],
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.retrieve("{collection_name}", {
                  ids: [0, 3, 100],
                });
            - language: rust
              code: |
                use qdrant_client::client::QdrantClient;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .get_points(
                        "{collection_name}",
                        None,
                        &[0.into(), 30.into(), 100.into()],
                        Some(false),
                        Some(false),
                        None,
                    )
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.PointIdFactory.id;

                import java.util.List;

                client
                    .retrieveAsync("{collection_name}", List.of(id(0), id(30), id(100)), false, false, null)
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.RetrieveAsync(
                  collectionName: "{collection_name}",
                  ids: [0, 30, 100],
                  withPayload: false,
                  withVectors: false
                );

    put:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.upsert(
                    collection_name="{collection_name}",
                    points=[
                        models.PointStruct(
                            id=1,
                            payload={
                                "color": "red",
                            },
                            vector=[0.9, 0.1, 0.1],
                        ),
                        models.PointStruct(
                            id=2,
                            payload={
                                "color": "green",
                            },
                            vector=[0.1, 0.9, 0.1],
                        ),
                        models.PointStruct(
                            id=3,
                            payload={
                                "color": "blue",
                            },
                            vector=[0.1, 0.1, 0.9],
                        ),
                    ],
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.upsert("{collection_name}", {
                  points: [
                    {
                      id: 1,
                      payload: { color: "red" },
                      vector: [0.9, 0.1, 0.1],
                    },
                    {
                      id: 2,
                      payload: { color: "green" },
                      vector: [0.1, 0.9, 0.1],
                    },
                    {
                      id: 3,
                      payload: { color: "blue" },
                      vector: [0.1, 0.1, 0.9],
                    },
                  ],
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::PointStruct};
                use serde_json::json;

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .upsert_points_batch_blocking(
                        "{collection_name}".to_string(),
                        None,
                        vec![
                            PointStruct::new(
                                1,
                                vec![0.9, 0.1, 0.1],
                                json!(
                                    {"color": "red"}
                                )
                                .try_into()
                                .unwrap(),
                            ),
                            PointStruct::new(
                                2,
                                vec![0.1, 0.9, 0.1],
                                json!(
                                    {"color": "green"}
                                )
                                .try_into()
                                .unwrap(),
                            ),
                            PointStruct::new(
                                3,
                                vec![0.1, 0.1, 0.9],
                                json!(
                                    {"color": "blue"}
                                )
                                .try_into()
                                .unwrap(),
                            ),
                        ],
                        None,
                        100,
                    )
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.PointIdFactory.id;
                import static io.qdrant.client.VectorFactory.vector;
                import static io.qdrant.client.VectorsFactory.namedVectors;

                import java.util.List;
                import java.util.Map;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.PointStruct;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .upsertAsync(
                        "{collection_name}",
                        List.of(
                            PointStruct.newBuilder()
                                .setId(id(1))
                                .setVectors(
                                    namedVectors(
                                        Map.of(
                                            "image",
                                            vector(List.of(0.9f, 0.1f, 0.1f, 0.2f)),
                                            "text",
                                            vector(List.of(0.4f, 0.7f, 0.1f, 0.8f, 0.1f, 0.1f, 0.9f, 0.2f)))))
                                .build(),
                            PointStruct.newBuilder()
                                .setId(id(2))
                                .setVectors(
                                    namedVectors(
                                        Map.of(
                                            "image",
                                            List.of(0.2f, 0.1f, 0.3f, 0.9f),
                                            "text",
                                            List.of(0.5f, 0.2f, 0.7f, 0.4f, 0.7f, 0.2f, 0.3f, 0.9f))))
                                .build()))
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;

                var client = new QdrantClient("localhost", 6334);

                await client.UpsertAsync(
                  collectionName: "{collection_name}",
                  points: new List<PointStruct>
                  {
                    new()
                    {
                      Id = 1,
                      Vectors = new[] { 0.9f, 0.1f, 0.1f },
                      Payload = { ["city"] = "red" }
                    },
                    new()
                    {
                      Id = 2,
                      Vectors = new[] { 0.1f, 0.9f, 0.1f },
                      Payload = { ["city"] = "green" }
                    },
                    new()
                    {
                      Id = 3,
                      Vectors = new[] { 0.1f, 0.1f, 0.9f },
                      Payload = { ["city"] = "blue" }
                    }
                  }
                );

  /collections/{collection_name}/points/delete:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete(
                    collection_name="{collection_name}",
                    points_selector=models.PointIdsList(
                        points=[0, 3, 100],
                    ),
                )

                client.delete(
                    collection_name="{collection_name}",
                    points_selector=models.FilterSelector(
                        filter=models.Filter(
                            must=[
                                models.FieldCondition(
                                    key="color",
                                    match=models.MatchValue(value="red"),
                                ),
                            ],
                        )
                    ),
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.delete("{collection_name}", {
                  points: [0, 3, 100],
                });

                client.delete("{collection_name}", {
                    filter: {
                        must: [
                            {
                                key: "color",
                                match: {
                                    value: "red",
                                },
                            },
                        ],
                    },
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::{points_selector::PointsSelectorOneOf, Condition, Filter, PointsIdsList, PointsSelector}};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .delete_points_blocking(
                        "{collection_name}",
                        None,
                        &PointsSelector {
                            points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
                                ids: vec![0.into(), 3.into(), 100.into()],
                            })),
                        },
                        None,
                    )
                    .await?;

                    client
                        .delete_points_blocking(
                            "{collection_name}",
                            None,
                            &PointsSelector {
                                points_selector_one_of: Some(PointsSelectorOneOf::Filter(Filter::must([
                                    Condition::matches("color", "red".to_string()),
                                ]))),
                            },
                            None,
                        )
                        .await?;
            - language: java
              code: |
                import static io.qdrant.client.PointIdFactory.id;
                import static io.qdrant.client.ConditionFactory.matchKeyword;

                import java.util.List;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.Filter;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.deleteAsync("{collection_name}", List.of(id(0), id(3), id(100)));

                client
                    .deleteAsync(
                        "{collection_name}",
                        Filter.newBuilder().addMust(matchKeyword("color", "red")).build())
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.DeleteAsync(collectionName: "{collection_name}", ids: [0, 3, 100]);

                await client.DeleteAsync(collectionName: "{collection_name}", filter: MatchKeyword("color", "red"));

  /collections/{collection_name}/points/vectors:
    put:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.update_vectors(
                    collection_name="{collection_name}",
                    points=[
                        models.PointVectors(
                            id=1,
                            vector={
                                "image": [0.1, 0.2, 0.3, 0.4],
                            },
                        ),
                        models.PointVectors(
                            id=2,
                            vector={
                                "text": [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
                            },
                        ),
                    ],
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.updateVectors("{collection_name}", {
                    points: [
                        {
                            id: 1,
                            vector: {
                                image: [0.1, 0.2, 0.3, 0.4],
                            },
                        },
                        {
                            id: 2,
                            vector: {
                                text: [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
                            },
                        },
                    ],
                });
            - language: rust
              code: |
                use qdrant_client::qdrant::PointVectors;
                use std::collections::HashMap;

                client
                    .update_vectors_blocking(
                        "{collection_name}",
                        None,
                        &[
                            PointVectors {
                                id: Some(1.into()),
                                vectors: Some(
                                    HashMap::from([("image".to_string(), vec![0.1, 0.2, 0.3, 0.4])]).into(),
                                ),
                            },
                            PointVectors {
                                id: Some(2.into()),
                                vectors: Some(
                                    HashMap::from([(
                                        "text".to_string(),
                                        vec![0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
                                    )])
                                    .into(),
                                ),
                            },
                        ],
                        None,
                    )
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.PointIdFactory.id;
                import static io.qdrant.client.VectorFactory.vector;
                import static io.qdrant.client.VectorsFactory.namedVectors;

                import java.util.List;
                import java.util.Map;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .updateVectorsAsync(
                        "{collection_name}",
                        List.of(
                            PointVectors.newBuilder()
                                .setId(id(1))
                                .setVectors(namedVectors(Map.of("image", vector(List.of(0.1f, 0.2f, 0.3f, 0.4f)))))
                                .build(),
                            PointVectors.newBuilder()
                                .setId(id(2))
                                .setVectors(
                                    namedVectors(
                                        Map.of(
                                            "text", vector(List.of(0.9f, 0.8f, 0.7f, 0.6f, 0.5f, 0.4f, 0.3f, 0.2f)))))
                                .build()))
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;

                var client = new QdrantClient("localhost", 6334);

                await client.UpdateVectorsAsync(
                  collectionName: "{collection_name}",
                  points: new List<PointVectors>
                  {
                    new() { Id = 1, Vectors = ("image", new float[] { 0.1f, 0.2f, 0.3f, 0.4f }) },
                    new()
                    {
                      Id = 2,
                      Vectors = ("text", new float[] { 0.9f, 0.8f, 0.7f, 0.6f, 0.5f, 0.4f, 0.3f, 0.2f })
                    }
                  }
                );

  /collections/{collection_name}/points/vectors/delete:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_vectors(
                    collection_name="{collection_name}",
                    points=[0, 3, 100],
                    vectors=["text", "image"],
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.deleteVectors("{collection_name}", {
                  points: [0, 3, 10],
                  vectors: ["text", "image"],
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::{
                    points_selector::PointsSelectorOneOf, PointsIdsList, PointsSelector, VectorsSelector,
                }};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .delete_vectors_blocking(
                        "{collection_name}",
                        None,
                        &PointsSelector {
                            points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
                                ids: vec![0.into(), 3.into(), 10.into()],
                            })),
                        },
                        &VectorsSelector {
                            names: vec!["text".into(), "image".into()],
                        },
                        None,
                    )
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.PointIdFactory.id;

                import java.util.List;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .deleteVectorsAsync(
                        "{collection_name}", List.of("text", "image"), List.of(id(0), id(3), id(10)))
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.DeleteVectorsAsync("{collection_name}", ["text", "image"], [0, 3, 10]);

  /collections/{collection_name}/points/payload:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.set_payload(
                    collection_name="{collection_name}",
                    payload={
                        "property1": "string",
                        "property2": "string",
                    },
                    points=[0, 3, 10],
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.setPayload("{collection_name}", {
                  payload: {
                    property1: "string",
                    property2: "string",
                  },
                  points: [0, 3, 10],
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::{
                    points_selector::PointsSelectorOneOf, PointsIdsList, PointsSelector,
                }};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .set_payload_blocking(
                        "{collection_name}",
                        None,
                        &PointsSelector {
                            points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
                                ids: vec![0.into(), 3.into(), 10.into()],
                            })),
                        },
                        json!({
                            "property1": "string",
                            "property2": "string",
                        })
                        .try_into()
                        .unwrap(),
                        None,
                    )
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.PointIdFactory.id;
                import static io.qdrant.client.ValueFactory.value;

                import java.util.List;
                import java.util.Map;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .setPayloadAsync(
                        "{collection_name}",
                        Map.of("property1", value("string"), "property2", value("string")),
                        List.of(id(0), id(3), id(10)),
                        true,
                        null,
                        null)
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;

                var client = new QdrantClient("localhost", 6334);

                await client.SetPayloadAsync(
                  collectionName: "{collection_name}",
                  payload: new Dictionary<string, Value> { { "property1", "string" }, { "property2", "string" } },
                  ids: new ulong[] { 0, 3, 10 }
                );

    put:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.overwrite_payload(
                    collection_name="{collection_name}",
                    payload={
                        "property1": "string",
                        "property2": "string",
                    },
                    points=[0, 3, 10],
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.overwritePayload("{collection_name}", {
                  payload: {
                    property1: "string",
                    property2: "string",
                  },
                  points: [0, 3, 10],
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::{
                    points_selector::PointsSelectorOneOf, PointsIdsList, PointsSelector,
                }};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .overwrite_payload_blocking(
                        "{collection_name}",
                        None,
                        &PointsSelector {
                            points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
                                ids: vec![0.into(), 3.into(), 10.into()],
                            })),
                        },
                        json!({
                            "property1": "string",
                            "property2": "string",
                        })
                        .try_into()
                        .unwrap(),
                        None,
                    )
                    .await?;
            - language: java
              code: |
                import java.util.List;

                import static io.qdrant.client.PointIdFactory.id;
                import static io.qdrant.client.ValueFactory.value;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .overwritePayloadAsync(
                        "{collection_name}",
                        Map.of("property1", value("string"), "property2", value("string")),
                        List.of(id(0), id(3), id(10)),
                        true,
                        null,
                        null)
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;

                var client = new QdrantClient("localhost", 6334);

                await client.OverwritePayloadAsync(
                  collectionName: "{collection_name}",
                  payload: new Dictionary<string, Value> { { "property1", "string" }, { "property2", "string" } },
                  ids: new ulong[] { 0, 3, 10 }
                );

  /collections/{collection_name}/points/payload/delete:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.delete_payload(
                    collection_name="{collection_name}",
                    keys=["color", "price"],
                    points=[0, 3, 100],
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.deletePayload("{collection_name}", {
                  keys: ["color", "price"],
                  points: [0, 3, 100],
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::{
                    points_selector::PointsSelectorOneOf, PointsIdsList, PointsSelector,
                }};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .delete_payload_blocking(
                        "{collection_name}",
                        None,
                        &PointsSelector {
                            points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
                                ids: vec![0.into(), 3.into(), 100.into()],
                            })),
                        },
                        vec!["color".to_string(), "price".to_string()],
                        None,
                    )
                    .await?;
            - language: java
              code: |
                import java.util.List;

                import static io.qdrant.client.PointIdFactory.id;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .deletePayloadAsync(
                        "{collection_name}",
                        List.of("color", "price"),
                        List.of(id(0), id(3), id(100)),
                        true,
                        null,
                        null)
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.DeletePayloadAsync("{collection_name}", ["color", "price"], [0, 3, 10]);

  /collections/{collection_name}/points/payload/clear:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.clear_payload(
                    collection_name="{collection_name}",
                    points_selector=[0, 3, 100],
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.clearPayload("{collection_name}", {
                  points: [0, 3, 100],
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::{
                    points_selector::PointsSelectorOneOf, PointsIdsList, PointsSelector,
                }};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .clear_payload(
                        "{collection_name}",
                        None,
                        Some(PointsSelector {
                            points_selector_one_of: Some(PointsSelectorOneOf::Points(PointsIdsList {
                                ids: vec![0.into(), 3.into(), 100.into()],
                            })),
                        }),
                        None,
                    )
                    .await?;
            - language: java
              code: |
                import java.util.List;

                import static io.qdrant.client.PointIdFactory.id;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.clearPayloadAsync("{collection_name}", List.of(id(0), id(3), id(100)), null, null, null)
                                .get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.ClearPayloadAsync("{collection_name}", [0, 3, 10]);

  /collections/{collection_name}/points/batch:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.batch_update_points(
                    collection_name="{collection_name}",
                    update_operations=[
                        models.UpsertOperation(
                            upsert=models.PointsList(
                                points=[
                                    models.PointStruct(
                                        id=1,
                                        vector=[1.0, 2.0, 3.0, 4.0],
                                        payload={},
                                    ),
                                ]
                            )
                        ),
                        models.UpdateVectorsOperation(
                            update_vectors=models.UpdateVectors(
                                points=[
                                    models.PointVectors(
                                        id=1,
                                        vector=[1.0, 2.0, 3.0, 4.0],
                                    )
                                ]
                            )
                        ),
                        models.SetPayloadOperation(
                            set_payload=models.SetPayload(
                                payload={
                                    "test_payload_2": 2,
                                    "test_payload_3": 3,
                                },
                                points=[1],
                            )
                        ),
                    ],
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.batchUpdate("{collection_name}", {
                    operations: [
                        {
                            upsert: {
                                points: [
                                    {
                                        id: 1,
                                        vector: [1.0, 2.0, 3.0, 4.0],
                                        payload: {},
                                    },
                                ],
                            },
                        },
                        {
                            update_vectors: {
                                points: [
                                    {
                                        id: 1,
                                        vector: [1.0, 2.0, 3.0, 4.0],
                                    },
                                ],
                            },
                        },
                        {
                            set_payload: {
                                payload: {
                                    test_payload_2: 2,
                                    test_payload_3: 3,
                                },
                                points: [1],
                            },
                        },
                    ],
                });
            - language: rust
              code: |
                use qdrant_client::qdrant::{
                    points_selector::PointsSelectorOneOf,
                    points_update_operation::{
                        Operation, PointStructList, SetPayload, UpdateVectors,
                    },
                    PointStruct, PointVectors, PointsIdsList, PointsSelector, PointsUpdateOperation,
                };

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .batch_updates_blocking(
                        "{collection_name}",
                        &[
                            PointsUpdateOperation {
                                operation: Some(Operation::Upsert(PointStructList {
                                    points: vec![PointStruct::new(
                                        1,
                                        vec![1.0, 2.0, 3.0, 4.0],
                                        json!({}).try_into().unwrap(),
                                    )],
                                    ..Default::default()
                                })),
                            },
                            PointsUpdateOperation {
                                operation: Some(Operation::UpdateVectors(UpdateVectors {
                                    points: vec![PointVectors {
                                        id: Some(1.into()),
                                        vectors: Some(vec![1.0, 2.0, 3.0, 4.0].into()),
                                    }],
                                    ..Default::default()
                                })),
                            },
                            PointsUpdateOperation {
                                operation: Some(Operation::OverwritePayload(SetPayload {
                                    points_selector: Some(PointsSelector {
                                        points_selector_one_of: Some(PointsSelectorOneOf::Points(
                                            PointsIdsList {
                                                ids: vec![1.into()],
                                            },
                                        )),
                                    }),
                                    payload: HashMap::from([("test_payload".to_string(), 1.into())]),
                                    ..Default::default()
                                })),
                            },
                        ],
                        None,
                    )
                    .await?;
            - language: java
              code: |
                import java.util.List;
                import java.util.Map;

                import static io.qdrant.client.PointIdFactory.id;
                import static io.qdrant.client.ValueFactory.value;
                import static io.qdrant.client.VectorsFactory.vectors;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.PointStruct;
                import io.qdrant.client.grpc.Points.PointVectors;
                import io.qdrant.client.grpc.Points.PointsIdsList;
                import io.qdrant.client.grpc.Points.PointsSelector;
                import io.qdrant.client.grpc.Points.PointsUpdateOperation;
                import io.qdrant.client.grpc.Points.PointsUpdateOperation.PointStructList;
                import io.qdrant.client.grpc.Points.PointsUpdateOperation.SetPayload;
                import io.qdrant.client.grpc.Points.PointsUpdateOperation.UpdateVectors;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .batchUpdateAsync(
                        "{collection_name}",
                        List.of(
                            PointsUpdateOperation.newBuilder()
                            .setUpsert(
                                PointStructList.newBuilder()
                                .addPoints(
                                    PointStruct.newBuilder()
                                    .setId(id(1))
                                    .setVectors(vectors(
                                        1.0 f,
                                        2.0 f,
                                        3.0 f,
                                        4.0 f))
                                    .build())
                                .build())
                            .build(),
                            PointsUpdateOperation.newBuilder()
                            .setUpdateVectors(
                                UpdateVectors.newBuilder()
                                .addPoints(
                                    PointVectors.newBuilder()
                                    .setId(id(1))
                                    .setVectors(vectors(
                                        1.0 f,
                                        2.0 f,
                                        3.0 f,
                                        4.0 f))
                                    .build())
                                .build())
                            .build(),
                            PointsUpdateOperation.newBuilder()
                            .setSetPayload(
                                SetPayload.newBuilder()
                                .setPointsSelector(
                                    PointsSelector.newBuilder()
                                    .setPoints(PointsIdsList
                                        .newBuilder()
                                        .addIds(id(1))
                                        .build())
                                    .build())
                                .putAllPayload(
                                    Map.of("test_payload_2",
                                        value(2),
                                        "test_payload_3",
                                        value(3)))
                                .build())
                            .build()))
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;

                var client = new QdrantClient("localhost", 6334);

                await client.UpdateBatchAsync(
                    "{collection_name}",
                    [
                        new()
                        {
                            Upsert = new()
                            {
                                Points =
                                {
                                    new PointStruct { Id = 1, Vectors = new[] { 0.9f, 0.1f, 0.1f } },
                                }
                            }
                        },
                        new()
                        {
                            UpdateVectors = new()
                            {
                                Points =
                                {
                                    new PointVectors { Id = 1, Vectors = new[] { 0.9f, 0.1f, 0.1f } },
                                }
                            }
                        },
                        new()
                        {
                            SetPayload = new()
                            {
                                PointsSelector = new PointsSelector { Points = new PointsIdsList { Ids = { 1 } } },
                                Payload = { ["test_payload_2"] = 2, ["test_payload_3"] = 3 }
                            }
                        }
                    ]
                );

  /collections/{collection_name}/points/scroll:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.scroll(
                    collection_name="{collection_name}",
                    scroll_filter=models.Filter(
                        must=[
                            models.FieldCondition(key="color", match=models.MatchValue(value="red")),
                        ]
                    ),
                    limit=1,
                    with_payload=True,
                    with_vectors=False,
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.scroll("{collection_name}", {
                    filter: {
                        must: [
                            {
                                key: "color",
                                match: {
                                    value: "red",
                                },
                            },
                        ],
                    },
                    limit: 1,
                    with_payload: true,
                    with_vector: false,
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::{Condition, Filter, ScrollPoints}};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .scroll(&ScrollPoints {
                        collection_name: "{collection_name}".to_string(),
                        filter: Some(Filter::must([Condition::matches(
                            "color",
                            "red".to_string(),
                        )])),
                        limit: Some(1),
                        with_payload: Some(true.into()),
                        with_vectors: Some(false.into()),
                        ..Default::default()
                    })
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.ConditionFactory.matchKeyword;
                import static io.qdrant.client.WithPayloadSelectorFactory.enable;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.Filter;
                import io.qdrant.client.grpc.Points.ScrollPoints;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .scrollAsync(
                        ScrollPoints.newBuilder()
                            .setCollectionName("{collection_name}")
                            .setFilter(Filter.newBuilder().addMust(matchKeyword("color", "red")).build())
                            .setLimit(1)
                            .setWithPayload(enable(true))
                            .build())
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using static Qdrant.Client.Grpc.Conditions;

                var client = new QdrantClient("localhost", 6334);

                await client.ScrollAsync(
                  collectionName: "{collection_name}",
                  filter: MatchKeyword("color", "red"),
                  limit: 1,
                  payloadSelector: true
                );

  /collections/{collection_name}/points/search:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.search(
                    collection_name="{collection_name}",
                    query_filter=models.Filter(
                        must=[
                            models.FieldCondition(
                                key="city",
                                match=models.MatchValue(
                                    value="London",
                                ),
                            )
                        ]
                    ),
                    query_vector=[0.2, 0.1, 0.9, 0.7],
                    limit=3,
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.search("{collection_name}", {
                    filter: {
                        must: [
                            {
                                key: "city",
                                match: {
                                    value: "London",
                                },
                            },
                        ],
                    },
                    vector: [0.2, 0.1, 0.9, 0.7],
                    limit: 3,
                });
            - language: rust
              code: |
                use qdrant_client::{
                    client::QdrantClient,
                    qdrant::{Condition, Filter, SearchParams, SearchPoints},
                };

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .search_points(&SearchPoints {
                        collection_name: "{collection_name}".to_string(),
                        filter: Some(Filter::must([Condition::matches(
                            "city",
                            "London".to_string(),
                        )])),
                        params: Some(SearchParams {
                            hnsw_ef: Some(128),
                            exact: Some(false),
                            ..Default::default()
                        }),
                        vector: vec![0.2, 0.1, 0.9, 0.7],
                        limit: 3,
                        ..Default::default()
                    })
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.ConditionFactory.matchKeyword;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.Filter;
                import io.qdrant.client.grpc.Points.SearchPoints;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .searchAsync(
                        SearchPoints.newBuilder()
                            .setCollectionName("{collection_name}")
                            .setFilter(Filter.newBuilder().addMust(matchKeyword("city", "London")).build())
                            .addAllVector(List.of(0.2f, 0.1f, 0.9f, 0.7f))
                            .setLimit(3)
                            .build())
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using static Qdrant.Client.Grpc.Conditions;

                var client = new QdrantClient("localhost", 6334);

                await client.SearchAsync(
                  collectionName: "{collection_name}",
                  vector: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },
                  filter: MatchKeyword("city", "London"),
                  limit: 3
                );
 
  /collections/{collection_name}/points/search/batch:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                filter_ = models.Filter(
                    must=[
                        models.FieldCondition(
                            key="city",
                            match=models.MatchValue(
                                value="London",
                            ),
                        )
                    ]
                )

                search_queries = [
                    models.SearchRequest(vector=[0.2, 0.1, 0.9, 0.7], filter=filter_, limit=3),
                    models.SearchRequest(vector=[0.5, 0.3, 0.2, 0.3], filter=filter_, limit=3),
                ]

                client.search_batch(collection_name="{collection_name}", requests=search_queries)
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                const filter = {
                    must: [
                        {
                            key: "city",
                            match: {
                                value: "London",
                            },
                        },
                    ],
                };

                const searches = [
                    {
                        vector: [0.2, 0.1, 0.9, 0.7],
                        filter,
                        limit: 3,
                    },
                    {
                        vector: [0.5, 0.3, 0.2, 0.3],
                        filter,
                        limit: 3,
                    },
                ];

                client.searchBatch("{collection_name}", {
                    searches,
                });
            - language: rust
              code: |
                use qdrant_client::{
                    client::QdrantClient,
                    qdrant::{Condition, Filter, SearchBatchPoints, SearchPoints},
                };

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                let filter = Filter::must([Condition::matches("city", "London".to_string())]);

                let searches = vec![
                    SearchPoints {
                        collection_name: "{collection_name}".to_string(),
                        vector: vec![0.2, 0.1, 0.9, 0.7],
                        filter: Some(filter.clone()),
                        limit: 3,
                        ..Default::default()
                    },
                    SearchPoints {
                        collection_name: "{collection_name}".to_string(),
                        vector: vec![0.5, 0.3, 0.2, 0.3],
                        filter: Some(filter),
                        limit: 3,
                        ..Default::default()
                    },
                ];

                client
                    .search_batch_points(&SearchBatchPoints {
                        collection_name: "{collection_name}".to_string(),
                        search_points: searches,
                        read_consistency: None,
                        ..Default::default()
                    })
                    .await?;
            - language: java
              code: |
                import java.util.List;

                import static io.qdrant.client.ConditionFactory.matchKeyword;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.Filter;
                import io.qdrant.client.grpc.Points.SearchPoints;

                QdrantClient client =
                    new QdrantClient(QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                Filter filter = Filter.newBuilder().addMust(matchKeyword("city", "London")).build();
                List<SearchPoints> searches =
                    List.of(
                        SearchPoints.newBuilder()
                            .addAllVector(List.of(0.2f, 0.1f, 0.9f, 0.7f))
                            .setFilter(filter)
                            .setLimit(3)
                            .build(),
                        SearchPoints.newBuilder()
                            .addAllVector(List.of(0.5f, 0.3f, 0.2f, 0.3f))
                            .setFilter(filter)
                            .setLimit(3)
                            .build());
                client.searchBatchAsync("{collection_name}", searches, null).get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;
                using static Qdrant.Client.Grpc.Conditions;

                var client = new QdrantClient("localhost", 6334);

                var filter = MatchKeyword("city", "London");

                var searches = new List<SearchPoints>
                {
                  new()
                  {
                    Vector = { new float[] { 0.2f, 0.1f, 0.9f, 0.7f } },
                    Filter = filter,
                    Limit = 3
                  },
                  new()
                  {
                    Vector = { new float[] { 0.5f, 0.3f, 0.2f, 0.3f } },
                    Filter = filter,
                    Limit = 3
                  }
                };

                await client.SearchBatchAsync(collectionName: "{collection_name}", searches: searches);

  /collections/{collection_name}/points/search/groups:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.search_groups(
                    collection_name="{collection_name}",
                    query_vector=[1.1],
                    group_by="document_id",
                    limit=4,
                    group_size=2,
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.searchPointGroups("{collection_name}", {
                    vector: [1.1],
                    group_by: "document_id",
                    limit: 4,
                    group_size: 2,
                });
            - language: rust
              code: |
                use qdrant_client::{
                    client::QdrantClient,
                    qdrant::SearchPointGroups,
                };

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .search_groups(&SearchPointGroups {
                        collection_name: "{collection_name}".to_string(),
                        vector: vec![1.1],
                        group_by: "document_id".to_string(),
                        limit: 4,
                        group_size: 2,
                        ..Default::default()
                    })
                    .await?;
            - language: java
              code: |
                import java.util.List;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.SearchPointGroups;

                QdrantClient client = new QdrantClient(
                                QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .searchGroupsAsync(
                        SearchPointGroups.newBuilder()
                            .setCollectionName("{collection_name}")
                            .addAllVector(List.of(1.1f))
                            .setGroupBy("document_id")
                            .setLimit(4)
                            .setGroupSize(2)
                            .build())
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;

                var client = new QdrantClient("localhost", 6334);

                await client.SearchGroupsAsync(
                  collectionName: "{collection_name}",
                  vector: new float[] { 1.1f },
                  groupBy: "document_id",
                  limit: 4,
                  groupSize: 2
                );

  /collections/{collection_name}/points/recommend:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.recommend(
                    collection_name="{collection_name}",
                    positive=[100, 231],
                    negative=[718, [0.2, 0.3, 0.4, 0.5]],
                    strategy=models.RecommendStrategy.AVERAGE_VECTOR,
                    query_filter=models.Filter(
                        must=[
                            models.FieldCondition(
                                key="city",
                                match=models.MatchValue(
                                    value="London",
                                ),
                            )
                        ]
                    ),
                    limit=3,
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.recommend("{collection_name}", {
                    positive: [100, 231],
                    negative: [718, [0.2, 0.3, 0.4, 0.5]],
                    strategy: "average_vector",
                    filter: {
                        must: [
                            {
                                key: "city",
                                match: {
                                    value: "London",
                                },
                            },
                        ],
                    },
                    limit: 3,
                });
            - language: rust
              code: |
                use qdrant_client::{
                    client::QdrantClient,
                    qdrant::{Condition, Filter, RecommendPoints, RecommendStrategy},
                };

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .recommend(&RecommendPoints {
                        collection_name: "{collection_name}".to_string(),
                        positive: vec![100.into(), 200.into()],
                        positive_vectors: vec![vec![100.0, 231.0].into()],
                        negative: vec![718.into()],
                        negative_vectors: vec![vec![0.2, 0.3, 0.4, 0.5].into()],
                        strategy: Some(RecommendStrategy::AverageVector.into()),
                        filter: Some(Filter::must([Condition::matches(
                            "city",
                            "London".to_string(),
                        )])),
                        limit: 3,
                        ..Default::default()
                    })
                    .await?;
            - language: java
              code: |
                import java.util.List;

                import static io.qdrant.client.ConditionFactory.matchKeyword;
                import static io.qdrant.client.PointIdFactory.id;
                import static io.qdrant.client.VectorFactory.vector;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.Filter;
                import io.qdrant.client.grpc.Points.RecommendPoints;
                import io.qdrant.client.grpc.Points.RecommendStrategy;

                QdrantClient client =
                    new QdrantClient(QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .recommendAsync(
                        RecommendPoints.newBuilder()
                            .setCollectionName("{collection_name}")
                            .addAllPositive(List.of(id(100), id(200)))
                            .addAllPositiveVectors(List.of(vector(100.0f, 231.0f)))
                            .addAllNegative(List.of(id(718)))
                            .addAllPositiveVectors(List.of(vector(0.2f, 0.3f, 0.4f, 0.5f)))
                            .setStrategy(RecommendStrategy.AverageVector)
                            .setFilter(Filter.newBuilder().addMust(matchKeyword("city", "London")))
                            .setLimit(3)
                            .build())
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;
                using static Qdrant.Client.Grpc.Conditions;

                var client = new QdrantClient("localhost", 6334);

                await client.RecommendAsync(
                    "{collection_name}",
                    positive: new ulong[] { 100, 231 },
                    negative: new ulong[] { 718 },
                    filter: MatchKeyword("city", "London"),
                    limit: 3
                );

  /collections/{collection_name}/points/recommend/batch:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                recommend_queries = [
                    models.RecommendRequest(
                        positive=[100, 231], negative=[718], filter=filter_, limit=3
                    ),
                    models.RecommendRequest(positive=[200, 67], negative=[300], limit=3),
                ]

                client.recommend_batch(collection_name="{collection_name}", requests=recommend_queries)
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                const searches = [
                    {
                        positive: [100, 231],
                        negative: [718],
                        limit: 3,
                    },
                    {
                        positive: [200, 67],
                        negative: [300],
                        limit: 3,
                    },
                ];

                client.recommend_batch("{collection_name}", {
                    searches,
                });
            - language: rust
              code: |
                use qdrant_client::{
                    client::QdrantClient,
                    qdrant::{Condition, Filter, RecommendBatchPoints, RecommendPoints},
                };

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                let filter = Filter::must([Condition::matches("city", "London".to_string())]);

                let recommend_queries = vec![
                    RecommendPoints {
                        collection_name: "{collection_name}".to_string(),
                        positive: vec![100.into(), 231.into()],
                        negative: vec![718.into()],
                        filter: Some(filter.clone()),
                        limit: 3,
                        ..Default::default()
                    },
                    RecommendPoints {
                        collection_name: "{collection_name}".to_string(),
                        positive: vec![200.into(), 67.into()],
                        negative: vec![300.into()],
                        filter: Some(filter),
                        limit: 3,
                        ..Default::default()
                    },
                ];

                client
                    .recommend_batch(&RecommendBatchPoints {
                        collection_name: "{collection_name}".to_string(),
                        recommend_points: recommend_queries,
                        ..Default::default()
                    })
                    .await?;
            - language: java
              code: |
                import java.util.List;

                import static io.qdrant.client.ConditionFactory.matchKeyword;
                import static io.qdrant.client.PointIdFactory.id;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.Filter;
                import io.qdrant.client.grpc.Points.RecommendPoints;

                QdrantClient client =
                    new QdrantClient(QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                Filter filter = Filter.newBuilder().addMust(matchKeyword("city", "London")).build();

                List<RecommendPoints> recommendQueries =
                    List.of(
                        RecommendPoints.newBuilder()
                            .addAllPositive(List.of(id(100), id(231)))
                            .addAllNegative(List.of(id(718)))
                            .setFilter(filter)
                            .setLimit(3)
                            .build(),
                        RecommendPoints.newBuilder()
                            .addAllPositive(List.of(id(200), id(67)))
                            .addAllNegative(List.of(id(300)))
                            .setFilter(filter)
                            .setLimit(3)
                            .build());

                client.recommendBatchAsync("{collection_name}", recommendQueries, null).get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;
                using static Qdrant.Client.Grpc.Conditions;

                var client = new QdrantClient("localhost", 6334);

                var filter = MatchKeyword("city", "london");

                await client.RecommendBatchAsync(
                  collectionName: "{collection_name}",
                  recommendSearches:
                  [
                    new()
                    {
                      CollectionName = "{collection_name}",
                      Positive = { new PointId[] { 100, 231 } },
                      Negative = { new PointId[] { 718 } },
                      Limit = 3,
                      Filter = filter,
                    },
                    new()
                    {
                      CollectionName = "{collection_name}",
                      Positive = { new PointId[] { 200, 67 } },
                      Negative = { new PointId[] { 300 } },
                      Limit = 3,
                      Filter = filter,
                    }
                  ]
                );

  /collections/{collection_name}/points/recommend/groups:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.recommend_groups(
                    collection_name="{collection_name}",
                    positive=[100, 231],
                    negative=[718],
                    group_by="document_id",
                    limit=3,
                    group_size=2,
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.recommendPointGroups("{collection_name}", {
                    positive: [100, 231],
                    negative: [718],
                    group_by: "document_id",
                    limit: 3,
                    group_size: 2,
                });
            - language: rust
              code: |
                use qdrant_client::{
                    client::QdrantClient,
                    qdrant::{RecommendPointGroups, RecommendStrategy},
                };

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .recommend_groups(&RecommendPointGroups {
                        collection_name: "{collection_name}".to_string(),
                        group_by: "document_id".to_string(),
                        group_size: 2,
                        positive: vec![100.into(), 200.into()],
                        negative: vec![718.into()],
                        strategy: Some(RecommendStrategy::AverageVector.into()),
                        limit: 3,
                        ..Default::default()
                    })
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.PointIdFactory.id;

                import java.util.List;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.RecommendPointGroups;
                import io.qdrant.client.grpc.Points.RecommendStrategy;

                QdrantClient client =
                    new QdrantClient(QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client.recommendGroupsAsync(RecommendPointGroups.newBuilder()
                                .setCollectionName("{collection_name}")
                                .setGroupBy("document_id")
                                .setGroupSize(2)
                                .addAllPositive(List.of(id(100), id(200)))
                                .addAllNegative(List.of(id(718)))
                                .setStrategy(RecommendStrategy.AverageVector)
                                .setLimit(3)
                                .build());
            - language: csharp
              code: |
                using Qdrant.Client;
                using static Qdrant.Client.Grpc.Conditions;

                var client = new QdrantClient("localhost", 6334);

                await client.RecommendGroupsAsync(
                    "{collection_name}",
                    "document_id",
                    groupSize: 3,
                    positive: new ulong[] { 100, 231 },
                    negative: new ulong[] { 718 },
                    filter: MatchKeyword("city", "London"),
                    limit: 3
                );

  /collections/{collection_name}/points/discover:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                client.discover(
                    "{collection_name}",
                    target=[0.2, 0.1, 0.9, 0.7],
                    context=[
                        models.ContextExamplePair(positive=100, negative=718),
                        models.ContextExamplePair(positive=200, negative=300),
                    ],
                    limit=10,
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.discover("{collection_name}", {
                    target: [0.2, 0.1, 0.9, 0.7],
                    context: [
                        {
                            positive: 100,
                            negative: 718,
                        },
                        {
                            positive: 200,
                            negative: 300,
                        },
                    ],
                    limit: 10,
                });
            - language: rust
              code: |
                use qdrant_client::{
                    client::QdrantClient,
                    qdrant::{
                        target_vector::Target, vector_example::Example, ContextExamplePair, DiscoverPoints,
                        TargetVector, VectorExample,
                    },
                };

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .discover(&DiscoverPoints {
                        collection_name: "{collection_name}".to_string(),
                        target: Some(TargetVector {
                            target: Some(Target::Single(VectorExample {
                                example: Some(Example::Vector(vec![0.2, 0.1, 0.9, 0.7].into())),
                            })),
                        }),
                        context: vec![
                            ContextExamplePair {
                                positive: Some(VectorExample {
                                    example: Some(Example::Id(100.into())),
                                }),
                                negative: Some(VectorExample {
                                    example: Some(Example::Id(718.into())),
                                }),
                            },
                            ContextExamplePair {
                                positive: Some(VectorExample {
                                    example: Some(Example::Id(200.into())),
                                }),
                                negative: Some(VectorExample {
                                    example: Some(Example::Id(300.into())),
                                }),
                            },
                        ],
                        limit: 10,
                        ..Default::default()
                    })
                    .await?;
            - language: java
              code: |
                import java.util.List;

                import static io.qdrant.client.PointIdFactory.id;
                import static io.qdrant.client.VectorFactory.vector;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.ContextExamplePair;
                import io.qdrant.client.grpc.Points.DiscoverPoints;
                import io.qdrant.client.grpc.Points.TargetVector;
                import io.qdrant.client.grpc.Points.VectorExample;

                QdrantClient client =
                    new QdrantClient(QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .discoverAsync(
                        DiscoverPoints.newBuilder()
                            .setCollectionName("{collection_name}")
                            .setTarget(
                                TargetVector.newBuilder()
                                    .setSingle(
                                        VectorExample.newBuilder()
                                            .setVector(vector(0.2f, 0.1f, 0.9f, 0.7f))
                                            .build()))
                            .addAllContext(
                                List.of(
                                    ContextExamplePair.newBuilder()
                                        .setPositive(VectorExample.newBuilder().setId(id(100)))
                                        .setNegative(VectorExample.newBuilder().setId(id(718)))
                                        .build(),
                                    ContextExamplePair.newBuilder()
                                        .setPositive(VectorExample.newBuilder().setId(id(200)))
                                        .setNegative(VectorExample.newBuilder().setId(id(300)))
                                        .build()))
                            .setLimit(10)
                            .build())
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;

                var client = new QdrantClient("localhost", 6334);

                await client.DiscoverAsync(
                  collectionName: "{collection_name}",
                  target: new TargetVector
                  {
                    Single = new VectorExample { Vector = new float[] { 0.2f, 0.1f, 0.9f, 0.7f }, }
                  },
                  context:
                  [
                    new()
                    {
                      Positive = new VectorExample { Id = 100 },
                      Negative = new VectorExample { Id = 718 }
                    },
                    new()
                    {
                      Positive = new VectorExample { Id = 200 },
                      Negative = new VectorExample { Id = 300 }
                    }
                  ],
                  limit: 10
                );

  /collections/{collection_name}/points/discover/batch:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient, models

                client = QdrantClient(url="http://localhost:6333")

                discover_queries = [
                    models.DiscoverRequest(
                        target=[0.2, 0.1, 0.9, 0.7],
                        context=[
                            models.ContextExamplePair(
                                positive=100,
                                negative=718,
                            ),
                            models.ContextExamplePair(
                                positive=200,
                                negative=300,
                            ),
                        ],
                        limit=10,
                    ),
                    models.DiscoverRequest(
                        target=[0.5, 0.3, 0.2, 0.3],
                        context=[
                            models.ContextExamplePair(
                                positive=342,
                                negative=213,
                            ),
                            models.ContextExamplePair(
                                positive=100,
                                negative=200,
                            ),
                        ],
                        limit=5,
                    ),
                ]

                client.discover_batch("{collection_name}", discover_queries)
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                const searches = [
                    {
                        target: [0.2, 0.1, 0.9, 0.7],
                        context: [
                            {
                                positive: 100,
                                negative: 718,
                            },
                            {
                                positive: 200,
                                negative: 300,
                            },
                        ],
                        limit: 10,
                    },
                    {
                        target: [0.5, 0.3, 0.2, 0.3],
                        context: [
                            {
                                positive: 342,
                                negative: 213,
                            },
                            {
                                positive: 100,
                                negative: 200,
                            },
                        ],
                        limit: 5,
                    },
                ];

                client.discoverBatchPoints("{collection_name}", {
                    searches,
                });
            - language: rust
              code: |
                use qdrant_client::{
                    client::QdrantClient,
                    qdrant::{
                        target_vector::Target, vector_example::Example, ContextExamplePair, DiscoverBatchPoints,
                        DiscoverPoints, TargetVector, VectorExample,
                    },
                };

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                let discover_points = &DiscoverBatchPoints {
                    collection_name: "{collection_name}".to_string(),
                    discover_points: vec![
                        DiscoverPoints {
                            collection_name: "{collection_name}".to_string(),
                            target: Some(TargetVector {
                                target: Some(Target::Single(VectorExample {
                                    example: Some(Example::Vector(vec![0.2, 0.1, 0.9, 0.7].into())),
                                })),
                            }),
                            context: vec![
                                ContextExamplePair {
                                    positive: Some(VectorExample {
                                        example: Some(Example::Id(100.into())),
                                    }),
                                    negative: Some(VectorExample {
                                        example: Some(Example::Id(718.into())),
                                    }),
                                },
                                ContextExamplePair {
                                    positive: Some(VectorExample {
                                        example: Some(Example::Id(200.into())),
                                    }),
                                    negative: Some(VectorExample {
                                        example: Some(Example::Id(300.into())),
                                    }),
                                },
                            ],
                            limit: 10,
                            ..Default::default()
                        },
                        DiscoverPoints {
                            collection_name: "{collection_name}".to_string(),
                            target: Some(TargetVector {
                                target: Some(Target::Single(VectorExample {
                                    example: Some(Example::Vector(vec![0.5, 0.3, 0.2, 0.3].into())),
                                })),
                            }),
                            context: vec![
                                ContextExamplePair {
                                    positive: Some(VectorExample {
                                        example: Some(Example::Id(342.into())),
                                    }),
                                    negative: Some(VectorExample {
                                        example: Some(Example::Id(213.into())),
                                    }),
                                },
                                ContextExamplePair {
                                    positive: Some(VectorExample {
                                        example: Some(Example::Id(100.into())),
                                    }),
                                    negative: Some(VectorExample {
                                        example: Some(Example::Id(200.into())),
                                    }),
                                },
                            ],
                            limit: 10,
                            ..Default::default()
                        },
                    ],
                    ..Default::default()
                };

                client.discover_batch(discover_points).await?;
            - language: java
              code: |
                import static io.qdrant.client.PointIdFactory.id;
                import static io.qdrant.client.VectorFactory.vector;

                import java.util.Arrays;
                import java.util.List;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.ContextExamplePair;
                import io.qdrant.client.grpc.Points.DiscoverPoints;
                import io.qdrant.client.grpc.Points.TargetVector;
                import io.qdrant.client.grpc.Points.VectorExample;

                QdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                List <DiscoverPoints> discoverPoints = Arrays.asList(
                    DiscoverPoints.newBuilder()
                    .setCollectionName("{collection_name}")
                    .setTarget(
                        TargetVector.newBuilder()
                        .setSingle(
                            VectorExample.newBuilder()
                            .setVector(vector(
                                0.2 f,
                                0.1 f,
                                0.9 f,
                                0.7 f))
                            .build()))
                    .addAllContext(
                        List.of(
                            ContextExamplePair.newBuilder()
                            .setPositive(VectorExample
                                .newBuilder()
                                .setId(id(100)))
                            .setNegative(VectorExample
                                .newBuilder()
                                .setId(id(718)))
                            .build(),
                            ContextExamplePair.newBuilder()
                            .setPositive(VectorExample
                                .newBuilder()
                                .setId(id(200)))
                            .setNegative(VectorExample
                                .newBuilder()
                                .setId(id(300)))
                            .build()))
                    .setLimit(10)
                    .build(),
                    DiscoverPoints.newBuilder()
                    .setCollectionName("{collection_name}")
                    .setTarget(
                        TargetVector.newBuilder()
                        .setSingle(
                            VectorExample.newBuilder()
                            .setVector(vector(
                                0.5 f, 0.3 f, 0.2 f, 0.3 f))
                            .build()))
                    .addAllContext(
                        List.of(
                            ContextExamplePair.newBuilder()
                            .setPositive(VectorExample
                                .newBuilder()
                                .setId(id(342)))
                            .setNegative(VectorExample
                                .newBuilder()
                                .setId(id(213)))
                            .build(),
                            ContextExamplePair.newBuilder()
                            .setPositive(VectorExample
                                .newBuilder()
                                .setId(id(100)))
                            .setNegative(VectorExample
                                .newBuilder()
                                .setId(id(200)))
                            .build()))
                    .setLimit(10)
                    .build());
                client.discoverBatchAsync("{collection_name}", discoverPoints, null);
            - language: csharp
              code: |
                using Qdrant.Client;
                using Qdrant.Client.Grpc;

                var client = new QdrantClient("localhost", 6334);

                var discoverPoints = new List<DiscoverPoints>
                {
                    new DiscoverPoints
                    {
                        CollectionName = "{collection_name}",
                        Target = new TargetVector
                        {
                            Single = new VectorExample { Vector = new float[] { 0.2f, 0.1f, 0.9f, 0.7f }, }
                        },
                        Context =
                        {
                            new ContextExamplePair()
                            {
                                Positive = new VectorExample { Id = 100 },
                                Negative = new VectorExample { Id = 718 }
                            },
                            new ContextExamplePair()
                            {
                                Positive = new VectorExample { Id = 200 },
                                Negative = new VectorExample { Id = 300 }
                            }
                        },
                        Limit = 10
                    },
                    new DiscoverPoints
                    {
                        CollectionName = "{collection_name}",
                        Target = new TargetVector
                        {
                            Single = new VectorExample { Vector = new float[] { 0.5f, 0.3f, 0.2f, 0.3f }, }
                        },
                        Context =
                        {
                            new ContextExamplePair()
                            {
                                Positive = new VectorExample { Id = 342 },
                                Negative = new VectorExample { Id = 213 }
                            },
                            new ContextExamplePair()
                            {
                                Positive = new VectorExample { Id = 100 },
                                Negative = new VectorExample { Id = 200 }
                            }
                        },
                        Limit = 10
                    }
                };
                await client.DiscoverBatchAsync("{collection_name}", discoverPoints);

  /collections/{collection_name}/points/count:
    post:
      x-fern-examples:
        - code-samples:
            - language: python
              code: |
                from qdrant_client import QdrantClient

                client = QdrantClient(url="http://localhost:6333")

                client.count(
                    collection_name="{collection_name}",
                    count_filter=models.Filter(
                        must=[
                            models.FieldCondition(key="color", match=models.MatchValue(value="red")),
                        ]
                    ),
                    exact=True,
                )
            - language: typescript
              code: |
                import { QdrantClient } from "@qdrant/js-client-rest";

                const client = new QdrantClient({ host: "localhost", port: 6333 });

                client.count("{collection_name}", {
                    filter: {
                        must: [
                            {
                                key: "color",
                                match: {
                                    value: "red",
                                },
                            },
                        ],
                    },
                    exact: true,
                });
            - language: rust
              code: |
                use qdrant_client::{client::QdrantClient, qdrant::{Condition, CountPoints, Filter}};

                let client = QdrantClient::from_url("http://localhost:6334").build()?;

                client
                    .count(&CountPoints {
                        collection_name: "{collection_name}".to_string(),
                        filter: Some(Filter::must([Condition::matches(
                            "color",
                            "red".to_string(),
                        )])),
                        exact: Some(true),
                        ..Default::default()
                    })
                    .await?;
            - language: java
              code: |
                import static io.qdrant.client.ConditionFactory.matchKeyword;

                import io.qdrant.client.QdrantClient;
                import io.qdrant.client.QdrantGrpcClient;

                import io.qdrant.client.grpc.Points.Filter;

                QdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder("localhost", 6334, false).build());

                client
                    .countAsync(
                        "{collection_name}",
                        Filter.newBuilder().addMust(matchKeyword("color", "red")).build(),
                        true)
                    .get();
            - language: csharp
              code: |
                using Qdrant.Client;
                using static Qdrant.Client.Grpc.Conditions;

                var client = new QdrantClient("localhost", 6334);

                await client.CountAsync(
                  collectionName: "{collection_name}",
                  filter: MatchKeyword("color", "red"),
                  exact: true
                );
